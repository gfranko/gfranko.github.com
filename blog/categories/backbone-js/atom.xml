<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbone.js | Greg Franko]]></title>
  <link href="http://gregfranko.com/blog/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://gregfranko.com/"/>
  <updated>2014-02-14T18:08:17-08:00</updated>
  <id>http://gregfranko.com/</id>
  <author>
    <name><![CDATA[Greg Franko]]></name>
    <email><![CDATA[gfranko5@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone-Require-Boilerplate Explained]]></title>
    <link href="http://gregfranko.com/blog/backbone-require-boilerplate-explained/"/>
    <updated>2013-01-05T15:53:00-08:00</updated>
    <id>http://gregfranko.com/blog/backbone-require-boilerplate-explained</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/BoilerplateMVC/Backbone-Require-Boilerplate">Backbone-Require-Boilerplate</a> is a popular open-source boilerplate library that I created to help promote best practices when using Backbone.js with Require.js.</p>

<!-- more -->


<p><a href="https://github.com/BoilerplateMVC/Backbone-Require-Boilerplate" target="_blank"><img class="center" src="/images/rubik.png"></a></p>

<p>In the video, I walk through each boilerplate file, and explain in-depth how the library helps you create more maintainable applications.  Enjoy!</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/L_kqGJmc1rY "></iframe></div></p>

<p>If you are also interested in incorporating the Backbone Marionette library into your stack, check out the <a href="https://github.com/BoilerplateMVC/Marionette-Require-Boilerplate" target="_blank">Marionette-Require-Boilerplate</a>. Happy boilerplating!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.validateAll plugin]]></title>
    <link href="http://gregfranko.com/blog/backbone-dot-validateall-plugin/"/>
    <updated>2012-09-18T14:56:00-07:00</updated>
    <id>http://gregfranko.com/blog/backbone-dot-validateall-plugin</id>
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/gfranko/Backbone.validateAll">Backbone.validateAll</a></strong> is a small Backbone.js plugin that provides an option to only validate Model properties that are currently being set or saved.</p>

<!-- more -->


<p><img class="center" src="/images/backbone.png"></p>

<h3>Background</h3>

<p><em>Backbone.validateAll</em> originated from a failed Backbone.js <a href="https://github.com/documentcloud/backbone/pull/1595">pull request</a>.  The original pull request was created because of frustration with using the Backbone.js Model validate method when validating HTML forms.</p>

<h3>Backbone.js v0.9.1 Changes</h3>

<p>Since Backbone.js v0.9.1 and greater, Backbone Model validation was not made to elegantly handle form validation, since the default validate method will validate all Model attributes, regardless of what particular attribute is being set or saved. For certain use cases, it is necessary to only validate a certain Model property (or form field) without worrying about the validation of any other Model property (or form field).</p>

<h3>Performance!</h3>

<p>Backbone core contributor, <a href="https://github.com/braddunbar">@braddunbar</a>, presented a possible solution for this use case in the above mentioned <a href="https://github.com/documentcloud/backbone/pull/1595">pull request</a>, but it still involved calling all of the validation methods within the <code>validate()</code> method, which can negatively affect performance.</p>

<p>Here is a <a href="http://jsperf.com/backbone-validateall">jsPerf Test</a> showing the performance benefits when setting Backbone Model attributes with and without <em>Backbone.validateAll</em>.</p>

<!-- more -->


<h3>Who Should Use This</h3>

<p>Anyone who wants an <strong>option</strong> to validate only Model properties that are currently being set/saved instead of the entire Model.  An obvious use case for this is form validation.</p>

<p><strong>Note</strong>: The plugin does not override the default Backbone.js Model validation behavior (all Model attributes are validated whenever an attribute is saved/set on a Model) by default.  You need to pass the <strong>validateAll</strong> option when setting/saving Model attributes.</p>

<h3>Is it easy to use the plugin?</h3>

<p>Yes!  You just have to pass the validateAll option when setting/saving a Model attribute.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// The validateAll option makes sure that only the Model attributes that you are setting get passed to the validate method</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span> <span class="s2">&quot;firstname&quot;</span><span class="o">:</span> <span class="s2">&quot;Greg&quot;</span> <span class="p">},</span> <span class="p">{</span><span class="nx">validateAll</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Summary</h3>

<p>If you have found yourself frustrated about Backbone's default Model validation behavior, then this plugin is a perfect fit.  You can also read more about this plugin in Addy Osmani's <a href="http://addyosmani.github.com/backbone-fundamentals/">Backbone Fundamentals</a> book under the section titled <strong>Better Model Property Validation</strong>.  Happy Model validating!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js: Convincing the Boss Guide]]></title>
    <link href="http://gregfranko.com/blog/backbone-dot-js-convincing-the-boss-guide/"/>
    <updated>2012-09-17T10:00:00-07:00</updated>
    <id>http://gregfranko.com/blog/backbone-dot-js-convincing-the-boss-guide</id>
    <content type="html"><![CDATA[<p>I am officially pronouncing <strong>2012 as the year of the JavaScript MV* frameworks</strong>.  Although many people complain that the JavaScript MV* frameworks boom has created too many frameworks to choose from, which further divides the developer community, let's look at the glass half full.</p>

<!-- more -->


<p>The influx of JavaScript MV* frameworks has created new design patterns that have promoted <strong>JavaScript as a language that you should care about</strong>.  JavaScript codebase consistency, maintainability, and performance have never been scrutinized more.  This intensified focus is helping the web become an even better place to spend your time.</p>

<p>Although 2012 has been a big win for the JavaScript community, there is still much work to be done.  Much of that work consists of educating developers, who may not be JavaScript wizards (seriously not everyone can be <a href="http://paulirish.com/">Paul Irish</a>, <a href="http://addyosmani.com/">Addy Osmani</a>, etc), that organizing their front-end codebases deserves their full time and attention.</p>

<p>A common argument against using JavaScript MV* frameworks by non-JavaScript wizards is that most "apps" are not complex enough to warrent using these "bloated MV Whatever frameworks" (their words not mine).  Before you start screaming at your computer, let's look at this argument in more detail using <a href="http://backbonejs.org">Backbone.js</a>, one of the most popular JavaScript MV* frameworks, and <a href="http://gregfranko.com/backbone/customBuild/">custom Backbone.js builds</a>.</p>

<h3>Backbone.js</h3>

<p><img class="center" src="/images/backbone.png"></p>

<p><strong>Backbone.js</strong> is a great client-side MV* JavaScript framework that provides structure to JavaScript applications by providing View, Model, Collection, Router, and Event class objects.  Although your application may not need all of the functionality that Backbone.js provides you, 99% of all applications could use the functionality provided by one or more Backbone.js class objects.  <strong>Let's take a look at each Backbone.js class object and determine if a "simple" application needs the functionality provided.</strong></p>

<h4>Backbone.js View</h4>

<p>Backbone <strong>Views</strong> allow you to organize all of your JavaScript event handlers while also providing a mechanism for adding dynamic HTML to your page through the optional use of JavaScript templates.</p>

<p>Here is an example Backbone View class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">View</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Represents the actual DOM element that corresponds to your View</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Event Handlers</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;click #example&quot;</span><span class="o">:</span> <span class="s2">&quot;doSomething&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Updates the text of the element with an ID attribute of example            </span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#example&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;This is an example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">doSomething</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Do something</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Backbone.js View Conclusion</h5>

<p>The basic functionality that a Backbone View class object provides is organizing your JavaScript event handlers and organizing how you update your applications UI.  99.9% of all applications (simple or complex) will include JavaScript event handlers that respond to user interactions and then add content to a page.</p>

<p>A common problem with most applications is that their JavaScript code is filled with inconsistent event handlers.  You could very well see a "legacy" application with <strong>DOM Level 0</strong> (event handlers inside HTML code), <strong>DOM Level 1</strong> (event handlers inside JavaScript code that limit the amount of event handlers that can be bound to each HTML element) , and <strong>DOM Level 2</strong> event handlers (event handlers inside JavaScript code that allows an unlimited amount of event handlers to be bound to each HTML element).  This inconsistency makes it extremely difficult to maintain an app, especially if a new team member is added to the project.</p>

<p>If you are using a library, such as <a href="http://www.jquery.com">jQuery</a>, you most likely have many DOM Level 2 events in your codebase (ie. $("body").click(function() {})).  Although jQuery helps with the consistency of your event handlers, it does not help you structure how to organize all of your event handlers.  With just jQuery, an application could consist of spaghetti code that binds event handlers all over the place.  I have worked in this environment, and have found that more bugs are created because of this inconsistency.</p>

<p>No matter the complexity of your application, Backbone Views could very easily help promote best practices and improve maintainability of your JavaScript event handlers.</p>

<h4>Backbone Model</h4>

<p>Backbone <strong>Models</strong> store all of your applications business logic and data. This allows you to organize all of your application's data validation inside of your Models.</p>

<p>Here is an example Backbone Model class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Default properties</span>
</span><span class='line'>    <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">example</span><span class="o">:</span> <span class="s2">&quot;I love having my data separated from the DOM&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Any time a Model attribute is set, this method is called</span>
</span><span class='line'>    <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Backbone.js Model Conclusion</h5>

<p>The basic functionality that a Backbone Model class object provides is a place for your application to store and validate client-side information.  99.9% of applications will include validation of data.</p>

<p>A common problem with most applications is that they use the DOM (Document Object Model) as a database (Backbone.js creator, Jeremy Ashkenas, has talked about this at length).  Any time an application needs to find the current "state" of an application, that data is retrieved from the DOM.  This can severely hurt performance, since DOM related activities are one of the most memory intensive actions your JavaScript can take.</p>

<p>A common misconception is that the DOM is a part of the JavaScript language.  It isn't.  In fact, it is a completely separate API that JavaScript interacts with.  Having the ability to query the current "state" of your application without always resorting to querying the DOM is a HUGE WIN.</p>

<p>No matter the complexity of your application, Backbone Models could very easily promote decoupling your code and standardizing where your application performs business logic validation.</p>

<h4>Backbone.js Collection</h4>

<p>If your application is complex, it is also helpful to use Backbone <strong>Collections</strong>, which provides a mechanism to interact with many different Model instances. Since Backbone has a hard dependency on Underscore.js, you are able to utilize many Underscore.js methods to interact with Collections.</p>

<p>Here is an example Backbone Collection class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Collection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//Allows the Collection to work with User models</span>
</span><span class='line'><span class="nx">model</span><span class="o">:</span> <span class="nx">User</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Backbone.js Collection Conclusion</h5>

<p>The basic functionality that a Backbone Collection class object provides is a mechanism for your application to interact with one or more Backbone Models.</p>

<p>The Backbone Collection class object may not be necessary for all applications, since the true benefit of collections shines through when your application contains more than one Backbone Model instance, and very simple applications may only contain one model instance.</p>

<h4>Backbone.js Router</h4>

<p>Backbone <strong>Routers</strong> are typically used to define "routes" in your application. Routes are essentially a unique page in a traditional web application, but in a one page JavaScript application, they help organize your client-side logic without requiring a page refresh (traditionally appending a route as a hash tag to a browser's url or using the new HTML5 push state api to silently track page state).</p>

<p>Here is an example Backbone Router class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Required for Backbone to start listening to hashchange events</span>
</span><span class='line'>    <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Calls the home method when there is no hashtag on the url</span>
</span><span class='line'>        <span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="s1">&#39;home&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;home&#39;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Gets called when there is no hashtag on the url</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;My very first Backbone route&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Backbone.js Router Conclusion</h5>

<p>The basic functionality that a Backbone Router class object provides is a mechanism for your application to utlize a "single page" structure.  This is particularly useful if you do not want page refreshes in your application when a user navigates between "pages" or different sections of your app's functionality.</p>

<p>The Backbone Router class object may not be necessary for all applications, since not all applications may want the "single page" feel or care about refreshing the page.</p>

<h4>Backbone.js Event</h4>

<p>Backbone <strong>Events</strong> are an important concept in Backbone, since they provide you with an easy mechanism to use the pub sub pattern and decouple your code.  Backbone triggers certain events by default (eg. a Model change event is triggered after a Model property has been validated and saved), but Backbone also allows you to trigger and bind to custom events.  This is an extremely useful pattern, since it allows many different classes to listen to one class, without that one class knowing about any of its listeners.</p>

<p>Here is an example Event being triggered by a Backbone Model class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Default properties</span>
</span><span class='line'>    <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">example</span><span class="o">:</span> <span class="s2">&quot;I love having my data separated from the DOM&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Any time a Model attribute is set, this method is called</span>
</span><span class='line'>    <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">triggerEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Triggers an test event and passes data that can be accessed in the event handler</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">someData</span><span class="o">:</span> <span class="s2">&quot;data&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example Event being bound by a Backbone View class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Represents the actual DOM element that corresponds to your View (There is a one to one relationship between View Objects and DOM elements)</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Setting the view&#39;s model property.  This assumes you have created a model class and stored it in the Model variable</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Event handler that calls the initHandler method when the init Model Event is triggered</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Event Handlers</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;click #example&quot;</span><span class="o">:</span> <span class="s2">&quot;testModelEvent&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Updates the text of the element with an ID attribute of example            </span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#example&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;This is an example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">promptUser</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Isn&#39;t this great?&quot;</span><span class="p">,</span> <span class="s2">&quot;Yes, yes it is&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">testModelEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">triggerEvent</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Just got &quot;</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">someData</span> <span class="o">+</span> <span class="s2">&quot; from my model!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Backbone.js Event Conclusion</h5>

<p>The basic functionality that a Backbone Event class object provides is a mechanism for using the <strong>pub/sub</strong> pattern to decouple an application's codebase.  99.9% of applications could benefit from a design pattern that promotes decouplization (not sure if that is a real word).</p>

<p>A common jQuery design pattern is triggering and binding to <strong>jQuery special events</strong> on the HTML body element.  This pattern is extremely useful, but Backbone improves on this pattern, since it does not rely on the DOM for its pub/sub implementation.  This improves performance and flexibility, since it allows you to bind to custom events on a generic JavaScript object instead of just a jQuery object.</p>

<p>No matter the complexity of your application, the Backbone Events class object could very easily promote decoupling your code and consistent special event binding.</p>

<h3>Backbone.js Custom Builds</h3>

<p>Backbone.js does not support custom builds by default, so I looked at the Backbone codebase and split up all of the Backbone Class Objects into their own files. Since Backbone.js is not set up in a modular way and instead heavily uses local variables all scoped under one Immediately Invoked Function Expression (IIFE) like most libraries, I had to make a few changes to remove these local property dependencies so that they could be split into several files.</p>

<p>With Backbone.js custom builds, you can now use the Backbone Events class object as a standalone pub/sub solution, or only use Backbone Views to organize all of your app's event handlers, or use Backbone Models to store all of your applications data client-side, etc (all while minimizing your file size).</p>

<p>Backbone.js is incredible, so I wanted to make it even easier for people who aren't completely sold on using it, to only take what they want/need.  Start making <a href="http://gregfranko.com/backbone/customBuild/">Backbone.js Custom Builds</a> now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Require.js 2.0 Shim Configuration]]></title>
    <link href="http://gregfranko.com/blog/require-dot-js-2-dot-0-shim-configuration/"/>
    <updated>2012-05-29T15:40:00-07:00</updated>
    <id>http://gregfranko.com/blog/require-dot-js-2-dot-0-shim-configuration</id>
    <content type="html"><![CDATA[<p>Require.js 2.0 was recently released by James Burke, and with it comes a bunch of bug fixes and enhancements.  The major enhancement that I wanted to shed light on includes the new <code>Shim</code> configuration.</p>

<!-- more -->


<p><img class="center" src="/images/requirejs.png"></p>

<p>The <code>Shim</code> configuration is a much needed upgrade to the Require.js core that allows Require.js to load non-AMD compatible scripts.  In my previous post <a href="http://gregfranko.com/blog/using-backbone-dot-js-with-require-dot-js/">Using Backbone.js with Require.js</a>, I covered how Use.js, a Require.js plugin created by Backbone.js core contributor <a href="http://tbranyen.com/" target="_blank">Tim Branyen</a>, was necessary to load Backbone.js and Underscore.js (both AMD incompatible) with Require.js.  This was a good solution for integrating these two wonderful projects together, but it was still another project dependency that you needed to keep track of.</p>

<p>James Burke mentions Use.js as one of his inspirations for including the new Shim configuration.  Now, instead of including the Use.js plugin to load Backbone and Underscore, you can have a shim configuration in your main file like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="c1">// Sets the configuration for your third party scripts that are not AMD compatible</span>
</span><span class='line'>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="s2">&quot;backbone&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;underscore&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery&quot;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">exports</span><span class="o">:</span> <span class="s2">&quot;Backbone&quot;</span>  <span class="c1">//attaches &quot;Backbone&quot; to the window object</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="c1">// end Shim Configuration</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>Shim</code> configuration is also a replacement for the <strong>order</strong> plugin, which made sure certain scripts executed in a particular order.  Example use cases for this include loading jQuery and Backbone plugins, since Backbone must be executed before Backbone plugins are executed, and jQuery must be executed before jQuery plugins are executed.  Below is how you can load jQuery and Backbone plugins using Require.js 2.0 or greater:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="c1">// Sets the configuration for your third party scripts that are not AMD compatible</span>
</span><span class='line'>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="s1">&#39;jquery.selectBoxIt&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s1">&#39;backbone.Validation&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;backbone&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="c1">// end Shim Configuration</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For more documentation on all the new changes in Require.js 2.0, head over to the <a href="https://github.com/jrburke/requirejs/wiki/Upgrading-to-RequireJS-2.0">Require.js Github Wiki</a>.  Happy AMD'ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Backbone.js with Require.js]]></title>
    <link href="http://gregfranko.com/blog/using-backbone-dot-js-with-require-dot-js/"/>
    <updated>2012-05-24T17:30:00-07:00</updated>
    <id>http://gregfranko.com/blog/using-backbone-dot-js-with-require-dot-js</id>
    <content type="html"><![CDATA[<p><strong>Backbone.js</strong> is a great client-side MV* (not MVC) JavaScript framework that provides structure to JavaScript applications by providing View, Model, Collection, and Router classes.  Backbone also provides a pub sub (publish subscribe) mechanism, by allowing each of it's objects to trigger and bind to events.</p>

<!-- more -->


<p><img class="center" src="/images/backbone.png"></p>

<p>Backbone <strong>Views</strong> act as a combination of traditional MVC Views and Controllers, since they allow you to organize all of your JavaScript event handlers while also providing a mechanism for adding dynamic HTML to your page through the optional use of JavaScript templates.  Views will also often be where you set data on your Models.</p>

<p>Here is an example Backbone View class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">View</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Represents the actual DOM element that corresponds to your View (There is a one to one relationship between View Objects and DOM elements)</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Setting the view&#39;s model property.  This assumes you have created a model class and stored it in the Model variable</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Event Handlers</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;click #example&quot;</span><span class="o">:</span> <span class="s2">&quot;promptUser&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Updates the text of the element with an ID attribute of example            </span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#example&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;This is an example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">promptUser</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Isn&#39;t this great?&quot;</span><span class="p">,</span> <span class="s2">&quot;Yes, yes it is&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Backbone <strong>Models</strong> store all of your applications business logic and data. This allows you to organize all of your application's data validation inside of your Models.  In most cases, Models should not know about any of your Views, or the DOM.  There are certain design patterns (eg. modelbinding) where Models are aware of the DOM and set data on it, but most patterns do not implement this strategy since it is beneficial for Model's to be completely decoupled from other pieces of the application.</p>

<p>Here is an example Backbone Model class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Default properties</span>
</span><span class='line'>    <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">example</span><span class="o">:</span> <span class="s2">&quot;I love having my data separated from the DOM&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Any time a Model attribute is set, this method is called</span>
</span><span class='line'>    <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If your application is complex, it is also helpful to use Backbone <strong>Collections</strong>, which provides a mechanism to interact with many different Model instances. Since Backbone has a hard dependency on Underscore.js, you are able to utilize many Underscore.js methods to interact with Collections.  Keep in mind that you may alternatively use <strong>lodash</strong>, a drop-in replacement library for Underscore.js that provides cross browser bug fixes and performance improvements for Underscore.js.  Lodash also allows custom builds, so you can only use a minimum number of Underscore.js functions if you like (reducing file size).</p>

<p>Here is an example Backbone Collection class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Collection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//Allows the Collection to work with User models</span>
</span><span class='line'><span class="nx">model</span><span class="o">:</span> <span class="nx">User</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Backbone <strong>Routers</strong> are typically used to define "routes" in your application. Routes are essentially a unique page in a traditional web application, but in a one page JavaScript application, they help organize your client-side logic without requiring a page refresh (traditionally appending a route as a hash tag to a browser's url or using the new HTML5 push state api to silently track page state).</p>

<p>Here is an example Backbone Router class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Required for Backbone to start listening to hashchange events</span>
</span><span class='line'>    <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Calls the home method when there is no hashtag on the url</span>
</span><span class='line'>        <span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="s1">&#39;home&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;home&#39;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Gets called when there is no hashtag on the url</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;My very first Backbone route&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Backbone <strong>Events</strong> are an important concept in Backbone, since they provide you with an easy mechanism to use the pub sub pattern and decouple your code.  Backbone triggers certain events by default (eg. a Model change event is triggered after a Model property has been validated and saved), but Backbone also allows you to trigger and bind to custom events.  This is an extremely useful pattern, since it allows many different classes to listen to one class, without that one class knowing about any of its listeners.</p>

<p>Here is an example Event being triggered by a Backbone Model class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Default properties</span>
</span><span class='line'>    <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">example</span><span class="o">:</span> <span class="s2">&quot;I love having my data separated from the DOM&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Any time a Model attribute is set, this method is called</span>
</span><span class='line'>    <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">triggerEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Triggers an test event and passes data that can be accessed in the event handler</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">someData</span><span class="o">:</span> <span class="s2">&quot;data&quot;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example Event being bound by a Backbone View class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Represents the actual DOM element that corresponds to your View (There is a one to one relationship between View Objects and DOM elements)</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Setting the view&#39;s model property.  This assumes you have created a model class and stored it in the Model variable</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Event handler that calls the initHandler method when the init Model Event is triggered</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Event Handlers</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;click #example&quot;</span><span class="o">:</span> <span class="s2">&quot;testModelEvent&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Updates the text of the element with an ID attribute of example            </span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#example&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;This is an example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">promptUser</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Isn&#39;t this great?&quot;</span><span class="p">,</span> <span class="s2">&quot;Yes, yes it is&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">testModelEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">triggerEvent</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">test</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Just got &quot;</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">someData</span> <span class="o">+</span> <span class="s2">&quot; from my model!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Require.js</strong> serves two different purposes than Backbone.js. Require.js is an AMD (Asynchronous Module Definition) script loader that asynchronously loads your JavaScript to improve page load performance, while also providing you the ability to organize your JavaScript into self contained modules.  Each JavaScript file represents a module.</p>

<p><img class="center" src="/images/requirejs.png"></p>

<p>Each module is enclosed in a define tag that lists the module's file dependencies, and keeps the global namespace free (essentially acting as a JavaScript closure).  Since none of your modules are global, inside of each module, you need to declare which other modules are dependencies and pass them to your current module.  This provides a solution for limiting global variables and dependency management. This solution is much better then having many script tags in a single page, which can be cumbersome to keep track of which files depend on which other files.  It also encourages you to decouple your JavaScript logic (instead of the traditionally hard to read one page JavaScript application).</p>

<p>Here is a more advanced example of a Backbone View class used with Require.js:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;use!backbone&#39;</span><span class="p">,</span><span class="s1">&#39;models/model&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Model</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">self</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="nx">View</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Represents the actual DOM element that corresponds to your View (There is a one to one relationship between View Objects and DOM elements)</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// View constructor</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Storing the View context</span>
</span><span class='line'>        <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Setting the View&#39;s model property to the passed in Model</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;You are now using Backbone, Require, and jQuery!&quot;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;click #example&quot;</span><span class="o">:</span> <span class="s2">&quot;promptUser&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Updates the text of the element with an ID attribute of example</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#example&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;This is an example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">promptUser</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Isn&#39;t this amazing?&quot;</span><span class="p">,</span> <span class="s2">&quot;Yes, yes it is&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns the entire view (allows you to reuse your View class in a different module)</span>
</span><span class='line'><span class="k">return</span> <span class="k">new</span> <span class="nx">View</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Backbone.js and Require.js perfectly complement each other, but there is one problem... Backbone.js is not AMD compatible.  To be AMD compatible, a script must declare itself as a module by calling the <strong>define()</strong> method if it exists and list it's dependencies.  Backbone decided to not natively support AMD/Require.js, because it's creater, Jeremy Ashkenas, felt it was unnatural to have to change Backbone's source code so that it would work in Require.js and other AMD loaders.  Luckily for us, Backbone contributor, Tim Branyen, created <strong>Use.js</strong> for this exact reason.</p>

<p>Looking at the previous code example, you will notice that I am using the Use.js plugin to include Backbone as a dependency to my View class.  Use.js allows you to use (no pun intended) scripts that are not AMD compatible, by setting a one time configuration (typically in a main.js file or initialization file), and then prefixing dependencies with <code>use!</code>.</p>

<p>Here is a typical Use.js configuration with Backbone.js and Underscore.js:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="c1">// Sets the use.js configuration for your application</span>
</span><span class='line'>  <span class="nx">use</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">backbone</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;use!underscore&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">attach</span><span class="o">:</span> <span class="s2">&quot;Backbone&quot;</span>  <span class="c1">//attaches &quot;Backbone&quot; to the window object</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="nx">underscore</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">attach</span><span class="o">:</span> <span class="s2">&quot;_&quot;</span> <span class="c1">//attaches &quot;_&quot; to the window object</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="c1">// end Use.js Configuration</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note</strong>: Require.js 2.0 added support for loading non-AMD compatible scripts by using the Shim configuration.  You can find a more detailed explanation of the Shim configuration in my next <a href="http://gregfranko.com/blog/require-dot-js-2-dot-0-shim-configuration/" target="_blank">blog post</a>. If you want more in-depth explanations and examples of how to setup Backbone.js, Require.js, and the Shim configuration, check out the <a href="https://github.com/gfranko/Backbone-Require-Boilerplate" target="_blank">Backbone-Require-Boilerplate</a> I recently created on Github.</p>

<p>An additional benefit of using Require.js is you can <strong>optimize</strong> (concat, minifiy) your entire project or single JavaScript files (depending on your preference) using <strong>r.js</strong>, a library written by James Burke that allows you to use the Require.js Optimizer.  All you need to do is install either node.js or rhino (both can be used as command line tools but node.js is recommended) and create a build file.</p>

<p>Here is an example of an app.build.js configuration file:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Install node.js, navigate to the js folder, and then run this command: &quot;node r.js -o app.build.js&quot;</span>
</span><span class='line'><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Creates a js-optimized folder at the same folder level as your &quot;js&quot; folder and places the optimized project there</span>
</span><span class='line'>  <span class="nx">dir</span><span class="o">:</span> <span class="s2">&quot;../js-optimized&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 3rd party script alias names</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Core Libraries</span>
</span><span class='line'><span class="nx">modernizr</span><span class="o">:</span> <span class="s2">&quot;libs/modernizr-2.5.3.min&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">jquery</span><span class="o">:</span> <span class="s2">&quot;libs/jquery-1.7.2.min&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">underscore</span><span class="o">:</span> <span class="s2">&quot;libs/lodash-0.2.0.min&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">backbone</span><span class="o">:</span> <span class="s2">&quot;libs/backbone-0.9.2.min&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Require.js Plugins</span>
</span><span class='line'><span class="nx">use</span><span class="o">:</span> <span class="s2">&quot;plugins/use-0.3.0.min&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;plugins/text-1.0.8.min&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Sets the use.js configuration for your application</span>
</span><span class='line'>  <span class="nx">use</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">backbone</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;use!underscore&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">attach</span><span class="o">:</span> <span class="s2">&quot;Backbone&quot;</span>  <span class="c1">//attaches &quot;Backbone&quot; to the window object</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="nx">underscore</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">attach</span><span class="o">:</span> <span class="s2">&quot;_&quot;</span> <span class="c1">//attaches &quot;_&quot; to the window object</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span> <span class="c1">// end Use.js Configuration&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Modules to be optimized:</span>
</span><span class='line'>  <span class="nx">modules</span><span class="o">:</span> <span class="p">[</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;mobile&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;desktop&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">]</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Obviously your app.build.js file will most likely be different, but hopefully this helps get you on the right track (note: I took this directly from my Backbone-Require-Boilerplate project).</p>

<p>Considering the many advantages of using Backbone.js and Require.js together, I hope I have convinced you to try out these great open source projects.  Happy coding!</p>
]]></content>
  </entry>
  
</feed>
