<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | Greg Franko]]></title>
  <link href="http://gfranko.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://gfranko.github.com/"/>
  <updated>2013-11-02T21:49:36-04:00</updated>
  <id>http://gfranko.github.com/</id>
  <author>
    <name><![CDATA[Greg Franko]]></name>
    <email><![CDATA[gfranko5@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modular jQuery Plugins]]></title>
    <link href="http://gfranko.github.com/blog/modular-jquery-plugins/"/>
    <updated>2013-08-22T20:54:00-04:00</updated>
    <id>http://gfranko.github.com/blog/modular-jquery-plugins</id>
    <content type="html"><![CDATA[<p><a href="blog/modular-jquery-plugins/" target="_blank" title="Modular jQuery Plugins"><img class="left" src="/images/constructionhat.png" width="250"></a></p>

<p>In June 2013, I presented about modular jQuery plugins at the <a href="http://events.jquery.org/2013/portland/">jQuery Portland 2013</a> conference.  You can watch my entire <a href="http://www.youtube.com/watch?v=sC0JJRHuP5M" target="_blank">presentation video</a> and/or check out my full <a href="http://gregfranko.com/modular-jquery-plugins-talk/" target="_blank">slide deck</a>, but let's review my talk.</p>

<!-- more -->




<br><br>


<h2>What Does Modular Mean to You?</h2>

<p>The term "modular" has many different definitions in the JavaScript community.  In the context of this blog post, let's establish it as JavaScript logic that is separated from the rest of a codebase, can work independently, and <strong>does one thing and does it well</strong>.</p>

<h2>Why Modular?</h2>

<p><strong>Maintainability</strong>.  It is far easier for developers to understand code that has a <strong>limited scope</strong>.</p>

<h2>Benefits of a Maintainable Codebase</h2>

<p><em>New Contributors</em> - A modular codebase allows new contributors to make improvements/changes straight away, since knowledge of an entire codebase is not required.</p>

<p><em>Core Maintainer</em> - Looking at code you wrote over three months ago might as well have been written by someone else.  You will experience the same learning curve improvement that new contributors experience.</p>

<p><em>Code Reuse</em> - When different parts of an application are separated into standalone modules, it is easier to plugin and play each part wherever you need it.  This drastically decreases the amount of code and code duplication in a codebase.  Less bytes = happier developers.</p>

<p><em>Physical and Emotional Well-Being</em> - Wading through one monolithic file is difficult on the eyes and brain.  Looking at logically-grouped small files is not.</p>

<h2>jQuery Plugins</h2>

<p>Now that we have covered the benefits of a modular codebase, let's take a high-level look at a typical jQuery plugin codebase.</p>

<p>Let's assume this is a jQuery Tooltip plugin that has been written in one file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Adding the tooltip method to the jQuery prototype</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tooltip</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">options</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Boilerplate jQuery plugin code goes here</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// Plugin Constructor</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">Tooltip</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>  <span class="c1">// All my plugin logic goes here</span>
</span><span class='line'>  <span class="nx">Tooltip</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="c1">//Default Options</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tooltip</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For very small plugins, this code structure will work at first.  Unfortunately, one of the most common problems in software development, <a href="http://en.wikipedia.org/wiki/Feature_creep">feature creep</a>, will demonstrate that this architecture is not scalable.</p>

<blockquote><p>As more features are added to a plugin and the codebase grows, it becomes more difficult to maintain.</p></blockquote>

<h2>How to Become Modular?</h2>

<p>AMD (e.g. Require.js) and CommonJS (e.g. Node.js) are the two most commonly used module formats that allow you to separate your codebase into small reusable pieces.  If you aren't using a specific module format, then you need to be aware of inner-file dependencies when separating logic into different files and then bringing them together at build time.</p>

<h2>Can I use AMD with my jQuery Plugin?</h2>

<p>Yes!  You can wrap each JavaScript file in an AMD <code>define()</code> method call, that lists all file dependencies, and then use the Require.js optimizer, <a href="https://github.com/jrburke/r.js/">r.js</a>, and <a href="https://github.com/jrburke/almond">Almond.js</a> to build your library.</p>

<p>This means that you can internally use AMD to build your JavaScript library, while not forcing users to use AMD themselves.</p>

<p>Here is an example Require.js build profile (using Almond.js) to do just that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;src/js&quot;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// Set&#39;s the path name of the first file that will be built</span>
</span><span class='line'><span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'><span class="s2">&quot;examplePlugin&quot;</span><span class="o">:</span> <span class="s2">&quot;app/begin&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="c1">// Makes sure everthing is wrapped in an IIFE (does not expose any global vars)</span>
</span><span class='line'><span class="nx">wrap</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'><span class="c1">// Uses the small AMD shim, Almond.js, instead of Require.js</span>
</span><span class='line'><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;../libs/almond&quot;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// All of your Require.js configurations would go in here</span>
</span><span class='line'><span class="nx">mainConfigFile</span><span class="o">:</span> <span class="s2">&quot;app/config/config.js&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">include</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;examplePlugin&quot;</span><span class="p">],</span>
</span><span class='line'><span class="c1">// Creates a new minified file</span>
</span><span class='line'><span class="nx">out</span><span class="o">:</span> <span class="s2">&quot;js/dist/examplePlugin.min.js&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This works great, but unfortunately, Almond.js needs to be built into your library's source file.  Although Almond.js is a small library (~1kb gzipped and minified), it is not desirable for third-party code to be built inside of your own third-party library.</p>

<p>Recently, jQuery started wrapping all of it's <a href="https://github.com/jquery/jquery/tree/master/src">source files</a> in AMD <code>define()</code> method calls.  Instead of including an AMD shim, such as Almond.js, the jQuery team is using regular expression checks, at <a href="https://github.com/jquery/jquery/blob/1.x-master/build/tasks/build.js">build time</a>, to convert all <code>define()</code> method calls into local variables.  This allows the jQuery team to use the benefits of AMD (e.g. dependency management) during development, while not having to include an AMD shim (such as Almond.js) after the jQuery production source file is built.</p>

<p>This is a great idea, but I am looking forward to someone (potentially me) creating <strong>a Grunt plugin that can generically reverse engineer an Almond.js project</strong> at build time and removes any AMD trace.  When this happens, I believe the majority of JavaScript library authors will start incorporating AMD into their workflows.</p>

<h2>How to Make jQuery Plugins Maintainable</h2>

<p>Abstract <strong>boilerplate</strong> code</p>

<p>Make the codebase <strong>modular</strong> (even without Require.js)</p>

<h2>Abstract jQuery Plugin Boilerplate</h2>

<p>There are currently two open-source libraries that help abstract away common jQuery plugin boilerplate code; the <a href="http://api.jqueryui.com/jQuery.widget/">jQueryUI Widget Factory</a> and <a href="https://github.com/gfranko/jqfactory">jqfactory</a>.</p>

<h2>jQueryUI Widget Factory</h2>

<p><a href="http://jqueryui.com" target="_blank" title="jQueryUI"><img class="center" src="/images/jquery_ui_logo_small.gif" width="500"></a></p>

<p>Provides a <strong>consistent foundation and API</strong> for building jQuery plugins</p>

<p>Supports <strong>widget inheritance</strong> using functions</p>

<p>Provides common <strong>helper methods</strong></p>

<p>Let's us create plugins using <strong>object literals</strong></p>

<p><strong>Can be used independently of jQueryUI</strong></p>

<p><em>Example</em>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Calling the jQueryUI Widget Factory Method</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">widget</span><span class="p">(</span><span class="s2">&quot;an.example&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// These options will be used as defaults</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">someOption</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// Constructor</span>
</span><span class='line'>  <span class="nx">_create</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">internal</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>  <span class="c1">// Custom method we added to our plugin instance</span>
</span><span class='line'>  <span class="nx">customMethod</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>  <span class="c1">// The rest of your plugin goes here</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>jqfactory</h2>

<p><a href="http://jqueryui.com" target="_blank" title="jQueryUI"><img class="center" src="/images/constructionhat.png" width="400"></a></p>

<p>Supports <strong>widget inheritance</strong> using object literals</p>

<p>Provides common <strong>helper methods</strong></p>

<p>Supports <strong>jQuery prototype namespacing</strong></p>

<p>Includes an elegant, promises-based, solution for <strong>asynchronous initializations</strong></p>

<p>Easy event binding support <strong>similar to Backbone.js views</strong></p>

<p><em>Example</em>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="c1">// Calling the jqfactory Method</span>
</span><span class='line'>   <span class="nx">$</span><span class="p">.</span><span class="nx">jqfactory</span><span class="p">(</span><span class="s1">&#39;person.greg&#39;</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="c1">// Default plugin options</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">occupation</span><span class="o">:</span> <span class="s1">&#39;JavaScript Engineer&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// Plugin Constructor (called first)</span>
</span><span class='line'>    <span class="nx">_create</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
</span><span class='line'>    <span class="c1">// Dom manipulation goes here (called second)</span>
</span><span class='line'>    <span class="nx">_render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
</span><span class='line'>    <span class="c1">// Plugin event bindings (called third)</span>
</span><span class='line'>    <span class="nx">_events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click&#39;</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// All event listeners are now bound (called last)</span>
</span><span class='line'>    <span class="nx">_postevents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Differences Between the jQueryUI Widget Factory and jqfactory</h3>

<p>  <strong>Namespacing</strong></p>

<p>  jqfactory supports jQuery prototype namespacing and the jQueryUI Widget Factory does not.  This means that with jqfactory, you could create a multiple jQuery plugins under a single jQuery name (reducing the possibility of naming collisions).</p>

<p>  <strong>Inheritance</strong></p>

<p>  jqfactory allows widgets to inherit from object literals when the jQueryUI Widget Factory supports inheritance using functions.</p>

<p>  <strong>AMD support</strong></p>

<p>  jqfactory exports itself as a named AMD module ("jqfactory") when the jQueryUI Widget Factory does not currently support AMD (although all jQueryUI files will soon be exported as anonymous AMD modules in a future release).</p>

<p>  <strong>Event Handlers</strong></p>

<p>  jqfactory does not support passing event handlers as options when the jQueryUI Widget Factory does support event handler options.</p>

<p>  <strong>Assumed Environment</strong></p>

<p>  jqfactory does not assume that you are using jQueryUI, when the jQueryUI Widget Factory does (e.g. Expects jQueryUI CSS class names).</p>

<p>  <strong>Syntactic Sugar</strong></p>

<p>  jqfactory provides helpful abstractions in places the widget factory does not.  Examples include event binding, jQuery deferred object support on intialization, and automatic event firing for certain actions (e.g. setting options)</p>

<h2>Separate Our Plugin into Independent Pieces</h2>

<p>From here on out, let's assume we are using jqfactory to abstract away our jQuery plugin boilerplate code and are now ready to split up our plugin into separate files.</p>

<h2>Our First jQuery Plugin File</h2>

<p>Let's assume that this file will be the first built file and will contain our default plugin options.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// options.js</span>
</span><span class='line'><span class="c1">// ----------</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">example</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">example</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">someOption</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>On to the Next File</h2>

<p>Let's assume that this file will contain our plugin constructor function logic.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// &lt;em&gt;create.js</span>
</span><span class='line'><span class="c1">// ----------</span>
</span><span class='line'><span class="nx">example</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/em&gt;create = function() {</span>
</span><span class='line'>  <span class="c1">// Our constructor logic goes here</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Can You See the Pattern?</h2>

<p>So far, we are creating a new file for each plugin method.  The reality is that this is a bit overkill, so try to <strong>make logical modular design decisions</strong>.  In other words, try to put methods/features that depend on each other in the same file.  Since we are not using anything that handles dependency management (e.g. Require.js), we are forced to track dependencies ourselves.</p>

<h2>Creating Our Plugin</h2>

<p>Once we are done decoupling our plugin into different files, we can create our plugin using jqfactory.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// _plugin.js</span>
</span><span class='line'><span class="c1">// ----------</span>
</span><span class='line'><span class="c1">// Calling the jqfactory Method</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">jqfactory</span><span class="p">(</span><span class="s2">&quot;an.example&quot;</span><span class="p">,</span> <span class="nx">example</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Building Our Plugin with Grunt</h2>

<p><a href="http://gruntjs.com" target="_blank" title="Grunt.js"><img class="center" src="/images/grunt.png"></a></p>

<p>Since our plugin has been separated into multiple files, we need a command-line tool to build our plugin into one file (for a user to use).  We also want users to be able to exclude certain files from the build to allow custom builds.  This is where <strong>Grunt</strong> comes in.</p>

<h2>What is Grunt?</h2>

<p><a href="http://nodejs.org" target="_blank" title="Node.js"><img class="left" src="/images/nodejs.png" width="200"></a>
JavaScript (Node.js) Command-Line Task Runner</p>

<p>Perfect for <strong>automating repetitive tasks</strong></p>

<p>A <strong>huge plugin ecosystem</strong></p>

<h2>Example Grunt Tasks?</h2>

<p>File Concatenation</p>

<p>Minification</p>

<p>Code Quality Checking (e.g. jsHint)</p>

<p>Unit Testing and Phantom.js</p>

<p><strong>SO MUCH MORE</strong></p>

<h2>How Do We Use It?</h2>

<p>We need to create a file, called <strong>Gruntfile.js</strong>, at the root of our project directory.</p>

<h2>Creating Our Gruntfile</h2>

<h3>Step 1</h3>

<p>Inside of Gruntfile.js, we first need to wrap all of our Node.js code inside of a <strong>module.exports</strong> function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Gruntfile.js</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// The rest of our Grunt code will go here!</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 2</h3>

<p>Add the configurations for any Grunt plugins/custom tasks you would like to use inside of the <code>initConfig()</code> Grunt method and also call the <code>loadNpmTasks</code> Grunt method for each plugin.  For this example, we are going to use the <a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a> and <a href="https://github.com/chrissrogers/grunt-wrap">grunt-wrap</a> plugins.</p>

<p><strong>Note:</strong> Any plugins that start with the <em>grunt-contrib</em> naming convention are Grunt plugins that are maintained by the core Grunt team.  All other plugins are user plugins.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Gruntfile.js</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">baseFilePath</span> <span class="o">=</span> <span class="s1">&#39;src/js/&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">fileToBuild</span> <span class="o">=</span> <span class="nx">baseFilePath</span> <span class="o">+</span> <span class="s1">&#39;jquery.customBuild.js&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Our Grunt configuration</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'><span class="nx">concat</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;&amp;lt;%= customBuild.files %&amp;gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="nx">fileToBuild</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">wrap</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">modules</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="nx">fileToBuild</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">wrapper</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;;(function($, undefined) {\n&#39;</span><span class="p">,</span> <span class="s1">&#39;\n}(jQuery));&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-concat&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-wrap&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Our custom task will go here next  </span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note:</strong> In the previous code example, you will notice that we had to call the <code>loadNpmTasks()</code> Grunt method for each Grunt plugin we were using.  This can become annoying to do if you are using many Grunt plugins, so you may want to check out the <a href="https://github.com/sindresorhus/load-grunt-tasks">load-grunt-tasks</a> plugin, which allows you to load all Grunt plugins with one line of code.</p>

<h3>Step 3</h3>

<p>Create our very own customBuild <strong>custom Grunt task</strong>.  Our custom task will work together with the other Grunt plugins we are already using (concat, wrap) to allow users to create custom builds of our jQuery plugin.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Gruntfile.js</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">baseFilePath</span> <span class="o">=</span> <span class="s1">&#39;src/js/&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">fileToBuild</span> <span class="o">=</span> <span class="nx">baseFilePath</span> <span class="o">+</span> <span class="s1">&#39;jquery.customBuild.js&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Our Grunt configuration</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'><span class="nx">concat</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;&amp;lt;%= customBuild.files %&amp;gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="nx">fileToBuild</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">wrap</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">modules</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="nx">fileToBuild</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">wrapper</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;;(function($, undefined) {\n&#39;</span><span class="p">,</span> <span class="s1">&#39;\n}(jQuery));&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-concat&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-wrap&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Our custom task will go here next</span>
</span><span class='line'><span class="c1">// Registers a default Grunt Task</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;customBuild&#39;</span><span class="p">,</span> <span class="s1">&#39;customBuild task&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">defaultFiles</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;options&#39;</span><span class="p">,</span> <span class="s1">&#39;_create&#39;</span><span class="p">,</span> <span class="s1">&#39;_plugin&#39;</span><span class="p">,</span> <span class="s1">&#39;customMethod&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">args</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span> <span class="nx">customFiles</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Loops through and excludes any file that was passed</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span> <span class="o">=</span> <span class="nx">defaultFiles</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">defaultFiles</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Makes sure that each passed file has the correct file path</span>
</span><span class='line'>  <span class="nx">customFiles</span> <span class="o">=</span> <span class="nx">defaultFiles</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">currentFile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">baseFilePath</span> <span class="o">+</span> <span class="nx">currentFile</span> <span class="o">+</span> <span class="s1">&#39;.js&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// Sets a Grunt configuration variable</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;customBuild.files&#39;</span><span class="p">,</span> <span class="nx">customFiles</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Run&#39;s the Grunt concat plugin</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s1">&#39;concat&#39;</span><span class="p">,</span> <span class="s1">&#39;wrap&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Running Grunt</h2>

<p>On the command line, type: <code>grunt customBuild</code>.  This will build all of our plugin files into one file.</p>

<p>If you had wanted to exclude a file from the build (let's assume there is an optional customMethod.js file), then you could type: <code>grunt customBuild:customMethod</code></p>

<p><img class="center" src="/images/gruntcustombuild.png" width="400"></p>

<p><strong>Success!</strong></p>

<p>By default, any colon-separated arguments passed to our customBuild Grunt task will be mapped to plugin file names and will be not be included in our build.</p>

<h2>Final Thoughts</h2>

<p>JavaScript workflow tools are improving every day and will continue to improve.  Start using these tools today!</p>

<p>Also, if you would like to learn how to create custom web UI builds for your users, then check out the rest of <a href="http://gregfranko.com/modular-jquery-plugins-talk/#32">jQuery Portland Slide Deck</a> that covers my open source library, <a href="http://gregfranko.com/DownloadBuilder.js/">DownloadBuilder.js</a></p>

<p>Happy jQuery plugin building!</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/sC0JJRHuP5M "></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Best Practices]]></title>
    <link href="http://gfranko.github.com/blog/jquery-best-practices/"/>
    <updated>2013-07-20T11:24:00-04:00</updated>
    <id>http://gfranko.github.com/blog/jquery-best-practices</id>
    <content type="html"><![CDATA[<p><a href="http://gregfranko.com/jquery-best-practices/#/" target="_blank"><img class="left" src="/images/jquery.png" width="300"></a></p>

<p>Back in February 2013, I presented about jQuery best practices at the <a href="http://www.meetup.com/NoVA-Web-Develoment-User-Group/events/101712422/">Nova Web Development User Group</a> meetup.  Let's take a moment to review my <a href="http://gregfranko.com/jquery-best-practices/#/" target="_blank">presentation</a>.</p>

<!-- more -->




<br><br>


<h2>IIFEs</h2>

<p>IIFEs are an ideal solution for locally scoping global variables/properties and protecting your JavaScript codebase from outside interference (e.g. third-party libraries).  If you are writing jQuery code that will be run in many different environments (e.g. jQuery plugins), then it is important to use an IIFE to locally scope jQuery.</p>

<blockquote><p>You can't assume everyone is using the $ to alias jQuery.</p></blockquote>

<p>Here is how you would do it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// IIFE - Immediately Invoked Function Expression</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The $ is now locally scoped</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The rest of your code goes here!</span>
</span><span class='line'>
</span><span class='line'><span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">));</span>
</span><span class='line'><span class="c1">// The global jQuery object is passed as a parameter</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you don't like having to scroll to the bottom of your source file to see what global variables/properties you are passing to your IIFE, you can do this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// IIFE - Immediately Invoked Function Expression</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">yourcode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The global jQuery object is passed as a parameter</span>
</span><span class='line'>    <span class="nx">yourcode</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The rest of your code goes here!</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
To read more about IIFEs, you can read my blog post titled, <a href="/blog/i-love-my-iife/">I Love My IIFE</a>.</p>

<h2>Ready Event</h2>

<p>Many developers wrap all of their code inside of the jQuery ready event like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;document&quot;</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The DOM is ready!</span>
</span><span class='line'>    <span class="c1">// The rest of your code goes here!</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or developers use a shorter version like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The DOM is ready!</span>
</span><span class='line'>    <span class="c1">// The rest of your code goes here!</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you are doing either of the above patterns, then you should consider moving the pieces of your application (e.g. methods), that don't depend on the DOM, outside of the ready event handler.  Like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// IIFE - Immediately Invoked Function Expression</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">yourcode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The global jQuery object is passed as a parameter</span>
</span><span class='line'>    <span class="nx">yourcode</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The $ is now locally scoped </span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// The DOM is ready!</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The rest of your code goes here!</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This pattern makes it easier to separate your logic (from a code design perspective) since not everything has to be wrapped inside of a single anonymous function.  It will also improve your application's page load performance, since not everything needs to initialized right away.</p>

<h2>Caching DOM selectors</h2>

<p>When manipulating elements in the DOM (e.g. animating, setting attributes, changing CSS properties), it is important to consider performance.</p>

<blockquote><p>Every time you select a DOM element using jQuery, you are instantiating a new jQuery object and forcing jQuery to search the DOM.</p></blockquote>

<p>Instead of creating multiple jQuery instances and forcing jQuery to re-query the DOM for a particular element, you can cache your jQuery object in a variable and reuse it like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Stores the jQuery instance inside of a variable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#elem&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set&#39;s an element&#39;s title attribute using it&#39;s current text</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set&#39;s an element&#39;s text color to red</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Makes the element fade out</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">fadeOut</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you prefer the previous code snippet to be on one line, you can <strong>chain</strong> multiple jQuery methods together like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Stores the live DOM element inside of a variable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#elem&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Chaining</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">text</span><span class="p">()).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Adding DOM elements</h2>

<p>Adding elements to the DOM is one of the slowest and most common use cases in a web application.  To limit the performance hit, make sure you are not unneccessarily adding elements to the DOM.</p>

<p>A common example, that can cause web applications to feel janky (or slow), is building a dynamic HTML unordered list.  Since there could potentially be thousands of list items inside of the list, you want to make sure to only append to the DOM once (instead of thousands of times).  Like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Dynamically building an unordered list from an array</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">localArr</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Greg&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter&quot;</span><span class="p">,</span> <span class="s2">&quot;Kyle&quot;</span><span class="p">,</span> <span class="s2">&quot;Danny&quot;</span><span class="p">,</span> <span class="s2">&quot;Mark&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;ul.people&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">dynamicItems</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">localArr</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dynamicItems</span> <span class="o">+=</span> <span class="s2">&quot;&amp;lt;li id=&quot;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s2">&quot;&amp;gt;&quot;</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;/li&amp;gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">list</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">dynamicItems</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The previous example stores the entire HTML of the dynamic list inside of a local string variable.  Once all the HTML has been created, the list is appended to the page <strong>ONE TIME</strong>.  Many developers mistakingly append to the DOM each time they create a new list item.  <strong>DO NOT DO BE THAT DEVELOPER</strong></p>

<h2>Event Delegation</h2>

<p>DOM event handlers take up a lot of memory and can very easily cause <strong>memory leaks</strong> (and poor performance) in web applications.  We can use an HTML unordered list example to demonstrate how to use <strong>event delegation</strong> to reduce the number of event handlers that we have and the amount of memory our application uses.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#longlist&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">list</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;mouseenter&quot;</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Click me!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">list</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Why did you click me?!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The previous example uses the jQuery <code>on()</code> method to add <em>mouseenter</em> and <em>click</em> event handlers to an unordered list.  The second argument provided to the <code>on()</code> method is the <strong>event handler context</strong>.  This tells jQuery to trigger the associated unordered list event handler if a list item child element has been the targeted DOM element.</p>

<p>To understand event delegation, we have to understand <strong>event bubbling</strong>.  Event Bubbling is a behavior associated with DOM elements where parent DOM elements (all the way up to the <code>document</code>) are notified of child DOM element events.  Not all DOM events natively <em>bubble</em>, so jQuery has done the heavy lifting and made the event bubbling behavior consistent for every event and browser.</p>

<p>Because of event bubbling, we only have to add one additional event handler to the unordered list (instead of a new event handler for each child list item).  This saves system memory, which allows more memory to be allocated for other intensive operations, such as animations (improving our app's perceived performance).</p>

<h2>Ajax</h2>

<p>Since jQuery version 1.5+, the jQuery <code>ajax()</code> method has returned a Promise object.  Using Promises with Ajax allows us to bind multiple callback functions to our request, write flexible code where our ajax handling logic is in a different place than our actual request, and wait for multiple requests to complete before starting an action.</p>

<p>Here is an example of separating the handling logic from the actual request:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">personid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dynamicData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">dynamicData</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">personID</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Returns the jQuery ajax method</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;getName.php&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;get&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="nx">dynamicData</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getName</span><span class="p">(</span><span class="s2">&quot;2342342&quot;</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Updates the UI based the ajax result</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.person-name&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Our example demonstrates a <code>getName()</code> function that accepts a unique id, sends an ajax request with that unique id, and returns the jQuery <code>ajax()</code> method.  Since our function returns the jQuery <code>ajax()</code> method (which returns a Promise by default), we are able to call the <code>done()</code> method and pass a callback function (which will execute once the request has completed).</p>

<p>If we had wanted to wait for two separate ajax requests to our endpoint, we could have done something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">personid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dynamicData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">dynamicData</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">personID</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Returns the jQuery ajax method</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;getName.php&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;get&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="nx">dynamicData</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="nx">getName</span><span class="p">(</span><span class="s2">&quot;2342342&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">person2</span> <span class="o">=</span> <span class="nx">getName</span><span class="p">(</span><span class="s2">&quot;3712968&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">people</span> <span class="o">=</span> <span class="p">[</span><span class="nx">person1</span><span class="p">,</span> <span class="nx">person2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">people</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Both the ajax requests have completed</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We are using the JavaScript <code>apply()</code> method in the previous example to demonstrate how we can pass an array to the <code>$.when</code> method.  If you do not want to use an array, then you can very easily pass each promise object (stored in a variable) as regular parameters.</p>

<p>Happy jQuerying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Registering the jQueryUI Widget Factory as an AMD Module]]></title>
    <link href="http://gfranko.github.com/blog/registering-the-jqueryui-widget-factory-as-an-amd-module/"/>
    <updated>2013-02-10T09:39:00-05:00</updated>
    <id>http://gfranko.github.com/blog/registering-the-jqueryui-widget-factory-as-an-amd-module</id>
    <content type="html"><![CDATA[<p><a href="http://api.jqueryui.com/jQuery.widget/" target="_blank"><img class="left" src="/images/jqueryui.png" width="200"></a></p>

<p><strong>AMD</strong> (Asynchronous Module Definition) script loaders are fast becoming one of the most popular and important tools for organizing and maintaining JavaScript applications.  Many front-end developers, like myself, are becoming educated on the benefits of using a module system that promotes code reusability/decoupling, freeing the global namespace, dependency script management, and more.</p>

<!-- more -->




<br><br>


<p>Unfortunately, AMD script loaders, such as <a href="http://requirejs.org/">Require.js</a>, are not drop-in solutions.  To use an AMD module system, you must make sure every other JavaScript library used in your application is <em>AMD Compatible</em>.</p>

<h3>AMD Compatible</h3>

<p>For a JavaScript file to be <em>AMD Compatible</em>, the JavaScript content must be wrapped in a <code>define()</code> method and all module (file) dependencies must be listed.</p>

<p>A possible solution is to change the source of each JavaScript file you are using and make sure the content is wrapped inside of a <code>define()</code> method.  This is both time-intensive and error-prone, since you will even have to change the source of third-party libraries that your application is using, such as jQuery.</p>

<p>At this point you may be scratching your head and asking yourself a few questions...</p>

<!-- more -->


<h3>Common Questions</h3>

<p><strong>Why don't third-party libraries automatically wrap their code in a define method?</strong></p>

<p>Third-party libraries, such as jQuery, are often used in many different development environments, and the jQuery team cannot assume that jQuery is being used in an AMD environment.  If jQuery was not being used in an AMD environment, then a syntax error would be thrown complaining that <code>the define method is undefined</code>.</p>

<p>Luckily for us, jQuery and many other popular libraries have found a way to support the AMD API (with the help of the always awesome <a href="https://github.com/jrburke">James Burke</a>)!  When jQuery is executed, it checks to see if an AMD script loader is being used, and then conditionally wraps itself in a <code>define()</code> method and declares itself as a <strong>named AMD module</strong>.</p>

<p><strong>Is there a better way to load a non-AMD Compatible third-party script with Require.js then upgrading the source of a file?</strong>
Yes, with the Require.js v2.0 release, the <code>shim</code> configuration option was added to <em>shim</em> third-party libraries that were not AMD compatible and exported a global object.  You can read more about the <code>shim</code> configuration <a href="http://gregfranko.com/blog/require-dot-js-2-dot-0-shim-configuration/">here</a>.</p>

<p><strong>Does the shim configuration solve all of the AMD Compatibility problems?</strong>
No!  Although the <code>shim</code> configuration works for the most common uses cases, it is still not the ideal approach.  Shimmed third-party scripts cannot be loaded from a CDN after a build, since shimmed files are inlined by the builder and may be executed by Require.js before a CDN asset dependency.  The best approach is making sure a file is wrapped in a <code>define()</code> method (this works with CDN assets).</p>

<h3>jQuery AMD Support</h3>

<p>The first FAQ above mentioned that jQuery supports the AMD API by conditionally wrapping itself in a <code>define()</code> method and declaring itself as <strong>named AMD module</strong>.  Let's take a look at the jQuery source to see how they are doing it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">.</span><span class="nx">jQuery</span> <span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">define</span><span class="p">(</span> <span class="s2">&quot;jquery&quot;</span><span class="p">,</span> <span class="p">[],</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">jQuery</span><span class="p">;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The jQuery code is checking to make sure that a global <code>define()</code> method is on the page, that there is an <code>amd</code> property (object) set on the <code>define</code> method (Remember this is JavaScript and functions act as first-class objects and can have properties), and that the <code>amd</code> object contains a <code>jQuery</code> property that is set to true.  jQuery is essentially checking that an AMD script loader is on the page and that the AMD loader handles the special case when more than one jQuery version is included on the page (this is unfortunately very common).</p>

<p>If an AMD loader satisfies all of the jQuery AMD checks, then jQuery will wrap itself in the global <code>define()</code> method, register itself as a named module ("jquery"), and return itself (the jQuery object) within the <code>define()</code> method callback function.</p>

<p><strong>Note:</strong>  Registering <strong>named</strong> AMD modules is usually not recommended, since it hard codes a module id and does not allow you to change the module name, making it inflexible.  The reason most popular third-party libraries register as <strong>named</strong> AMD modules is because many other libraries depend on them, and desire a common name that they can list as a dependency.</p>

<h3>Using jQuery with Require.js</h3>

<p>Now that we know jQuery is AMD compatible, we can easily use jQuery with a Require.js configuration like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Sample Configuration File</span>
</span><span class='line'><span class="c1">// -------------------------</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Sets the js folder as the base directory for all future relative paths</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;./js&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 3rd party script alias names (Easier to type &quot;jquery&quot; than &quot;libs/jquery, etc&quot;)</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="c1">// Core Libraries</span>
</span><span class='line'>  <span class="c1">// --------------</span>
</span><span class='line'>  <span class="s2">&quot;jquery&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Includes Desktop Specific JavaScript files here (or inside of your Desktop router)</span>
</span><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;jquery&quot;</span><span class="p">],</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hey look, I&#39;m using jQuery with Require.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Using jQuery Plugins with Require.js</h3>

<p>Although jQuery supports the AMD API, that does not mean that jQuery plugins are also AMD compatible.  Here is how we could load a jQuery plugin that does not support the AMD API:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Sample Configuration File</span>
</span><span class='line'><span class="c1">// -------------------------</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Sets the js folder as the base directory for all future relative paths</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;./js&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 3rd party script alias names (Easier to type &quot;jquery&quot; than &quot;libs/jquery, etc&quot;)</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="c1">// Core Libraries</span>
</span><span class='line'>  <span class="c1">// --------------</span>
</span><span class='line'>  <span class="s2">&quot;jquery&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;example&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/plugins/example&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;example&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jquery&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Includes Desktop Specific JavaScript files here (or inside of your Desktop router)</span>
</span><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span> <span class="s2">&quot;example&quot;</span><span class="p">],</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hey look, I&#39;m using a jQuery plugin that does not support the AMD API with Require.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code example uses the <code>shim</code> configuration to tell Require.js that the plugin depends on jQuery.  Internally, Require.js waits until jQuery is loaded before it loads the jQuery plugin.</p>

<p>Luckily for plugin authors, a jQuery plugin can internally support the AMD API:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Example plugin</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">factory</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// AMD. Register as an anonymous module.</span>
</span><span class='line'>    <span class="nx">define</span><span class="p">([</span><span class="s1">&#39;jquery&#39;</span><span class="p">],</span> <span class="nx">factory</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Browser globals</span>
</span><span class='line'>    <span class="nx">factory</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">jqueryPlugin</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This jQuery plugin example checks to make sure an AMD loader is on the page and then registers itself as an <strong>anonymous</strong> AMD module (while also passing the "jquery" module as a dependency).  Since jQuery registers itself as a named AMD module, the plugin is able to pass that exact name as a dependency.</p>

<p><strong>Note:</strong> You can find other AMD patterns <a href="https://github.com/umdjs/umd">here</a>;</p>

<p>Here is how you would load the AMD Compatible jQuery plugin with Require.js:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Sample Configuration File</span>
</span><span class='line'><span class="c1">// -------------------------</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Sets the js folder as the base directory for all future relative paths</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;./js&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 3rd party script alias names (Easier to type &quot;jquery&quot; than &quot;libs/jquery, etc&quot;)</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="c1">// Core Libraries</span>
</span><span class='line'>  <span class="c1">// --------------</span>
</span><span class='line'>  <span class="s2">&quot;jquery&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;example&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/plugins/example&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Includes Desktop Specific JavaScript files here (or inside of your Desktop router)</span>
</span><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span> <span class="s2">&quot;example&quot;</span><span class="p">],</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hey look, I&#39;m using a jQuery plugin with Require.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>jQueryUI Widget Factory Plugins</h3>

<p>The above code example is a great solution for jQuery plugins to register themselves as anonymous AMD modules, but let's next look at jQuery plugins that depend on both jQuery and the <strong>jQueryUI Widget Factory</strong>.</p>

<p>In case you are not familiar, the jQueryUI Widget Factory <em>provides a flexible base for building complex, stateful plugins with a consistent API.</em> - per the jQueryUI website.</p>

<p>The Widget Factory is designed not only for plugins that are part of jQuery UI, but for general consumption by developers who want to create object-oriented components without reinventing common infrastructure.</p>

<p>Since more and more jQuery plugin authors, including myself, are using the jQueryUI Widget Factory, it is necessary to understand how to use these jQuery plugins with AMD loaders such as Require.js.</p>

<p>Since the jQueryUI Widget Factory does not support the AMD API, here is how you currently have to load jQuery plugins that depend on the jQueryUI Widget Factory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Sample Configuration File</span>
</span><span class='line'><span class="c1">// -------------------------</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Sets the js folder as the base directory for all future relative paths</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;./js&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 3rd party script alias names (Easier to type &quot;jquery&quot; than &quot;libs/jquery, etc&quot;)</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="c1">// Core Libraries</span>
</span><span class='line'>  <span class="c1">// --------------</span>
</span><span class='line'>  <span class="s2">&quot;jquery&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;jquery.ui.widget&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery.ui.widget&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;jquery.selectBoxIt&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/plugins/jquery.selectBoxIt&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;jquery.ui.widget&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jquery&quot;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;jquery.selectBoxIt&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jquery.ui.widget&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Includes Desktop Specific JavaScript files here (or inside of your Desktop router)</span>
</span><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery.ui.widget&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery.selectBoxIt&quot;</span><span class="p">],</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hey look, I&#39;m using a jQueryUI Widget Factory plugin with Require.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code uses the <code>shim</code> configuration to shim both the jQueryUI Widget Factory and <a href="https://github.com/gfranko/jquery.selectBoxIt.js">SelectBoxIt</a>, a jQuery plugin based on the jQueryUI Widget Factory.  This works, but requires additional configuration setup and the <code>shim</code> configuration, which prevents the loading of CDN assets after building using the Require.js optimizer.</p>

<p>After experiencing this first hand, I tweeted my desire that the jQueryUI Widget Factory should declare itself as a <strong>named</strong> AMD module, so that plugins (like SelectBoxIt) could list the Widget factory as a dependency and support the AMD API.</p>

<blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/jrburke">jrburke</a> You should convince the jQueryUI devs to declare the Widget Factory as a named module, like jQuery.Lot's of plugins depend on it.</p>&mdash; Greg Franko (@GregFranko) <a href="https://twitter.com/GregFranko/status/299184644887306240">February 6, 2013</a></blockquote>


<p>Dave Methvin, the President of the jQuery Foundation, and Scott Gonzalez, the jQueryUI Project lead, (both all around good guys), responded by asking me if James Burke's <a href="https://github.com/jrburke/jqueryui-amd">jqueryui-amd</a> project would suit my needs.</p>

<blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/gregfranko">gregfranko</a> Yes, @<a href="https://twitter.com/scott_gonzalez">scott_gonzalez</a> says you're taking me on a mandate? Let's gobowling. Does <a href="https://t.co/oE5mSOTg" title="https://github.com/jrburke/jqueryui-amd">github.com/jrburke/jquery…</a> work for you? @<a href="https://twitter.com/jrburke">jrburke</a></p>&mdash; Dave Methvin (@davemethvin) <a href="https://twitter.com/davemethvin/status/299595913150726145">February 7, 2013</a></blockquote>




<blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/scott_gonzalez">scott_gonzalez</a> @<a href="https://twitter.com/davemethvin">davemethvin</a> @<a href="https://twitter.com/jrburke">jrburke</a> I'll write a blog post and let you know when it is done.</p>&mdash; Greg Franko (@GregFranko) <a href="https://twitter.com/GregFranko/status/299613588459495424">February 7, 2013</a></blockquote>


<p>If you are not familiar with James Burke's <a href="https://github.com/jrburke/jqueryui-amd">jqueryui-amd</a> project, it is a Node.js command line project that will automatically wrap jQueryUI modules within <code>define()</code> methods and pass jQuery as a dependency, thus making jQueryUI <em>AMD Compatible</em>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;jquery&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// jQueryUI code goes here</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is a great solution if you are only using jQueryUI plugins (i.e. Calendar widget, etc), but not such a great solution for third-party plugin authors, like myself, who are using the jQueryUI Widget Factory as the base for our plugin structures.</p>

<p>Here is how you would load a jQueryUI Widget Factory plugin with Require.js, when using the <strong>jqueryui-amd</strong> project:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Sample Configuration File</span>
</span><span class='line'><span class="c1">// -------------------------</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Sets the js folder as the base directory for all future relative paths</span>
</span><span class='line'>  <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;./js&quot;</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 3rd party script alias names (Easier to type &quot;jquery&quot; than &quot;libs/jquery, etc&quot;)</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="c1">// Core Libraries</span>
</span><span class='line'>  <span class="c1">// --------------</span>
</span><span class='line'>  <span class="s2">&quot;jquery&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;jquery.ui.widget&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/jquery.ui.widget&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;jquery.selectBoxIt&quot;</span><span class="o">:</span> <span class="s2">&quot;libs/plugins/jquery.selectBoxIt&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Shimming SelectBoxIt by telling Require.js that the plugin depends on the jQueryUI Widget Factory</span>
</span><span class='line'><span class="s2">&quot;jquery.selectBoxIt&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jquery.ui.widget&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Includes Desktop Specific JavaScript files here (or inside of your Desktop router)</span>
</span><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery.ui.widget&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery.selectBoxIt&quot;</span><span class="p">],</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hey look I&#39;m using a jQueryUI Widget Factory plugin with Require.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the above code example, you'll notice that jQueryUI Widget Factory no longer needs to use the shim configuration, since the <strong>jqueryui-amd</strong> project has wrapped it within a <code>define()</code> method.  Unfortunately, the SelectBoxIt plugin still needs to be shimmed, since it is not AMD compatible.</p>

<p>By now you may be thinking, couldn't you just support the AMD API within SelectBoxIt by doing this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">selectBoxIt</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// AMD. Register as an anonymous module.</span>
</span><span class='line'>    <span class="nx">define</span><span class="p">([</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery.ui.widget&quot;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">selectBoxIt</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Browser globals</span>
</span><span class='line'>    <span class="nx">selectBoxIt</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// SelectBoxIt code goes here</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}));</span> <span class="c1">// End of all modules</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Technically yes, I could conditionally support the AMD API by using the above code.  The problem is that it would be a very confusing process for plugin users, since I would have to point them to the <strong>jqueryui-amd</strong> project, which is not trivial to set up.  Or I could maintain an up-to-date AMD Compatible version of the jQueryUI Widget Factory. Not an ideal process.</p>

<p>It would be much easier to tell users to create a Require.js path called, "jquery.ui.widget", and be done with it!</p>

<h2>Upgrading the jQueryUI Widget Factory</h2>

<p>Following the lead of jQuery, I believe the jQueryUI Widget Factory should support the AMD API by registering as a named AMD module that Widget Factory plugins can declare as a dependency:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">widgetFactory</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// AMD. Register as an anonymous module.</span>
</span><span class='line'>    <span class="nx">define</span><span class="p">(</span> <span class="s2">&quot;jquery.ui.widget&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;jquery&quot;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">widgetFactory</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Browser globals</span>
</span><span class='line'>    <span class="nx">widgetFactory</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span> <span class="nx">$</span><span class="p">,</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// jQuery Widget Factory code goes here</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have listed "jquery.ui.widget" to be the default name of the Widget Factory, but that is only my personal opinion and may be subject to change.  If this change is put into the jQueryUI Widget Factory, then the thousands of plugins that are based on it (probably more), could easily support the AMD API.  This means that no Require.js configurations/extra steps would be necessary for you to use a jQuery plugin based on the Widget Factory.</p>

<p><strong>Note:</strong> Check out this <a href="https://gist.github.com/gfranko/4750778">gist</a> to see the full source of the AMD Compatible jQueryUI Widget Factory that I am proposing.</p>

<h2>Final Thoughts</h2>

<p>It only takes a couple lines of code to support the AMD API, so I feel that the jQueryUI Widget Factory should follow in the footsteps of its parent's favorite child, jQuery, and just do it (I am not sponsored by Nike).  I'd love to hear your thoughts!  Happy AMD'ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a jQuery Plugin using jqBoilerplate]]></title>
    <link href="http://gfranko.github.com/blog/creating-a-jquery-plugin-using-jqboilerplate/"/>
    <updated>2012-04-22T20:04:00-04:00</updated>
    <id>http://gfranko.github.com/blog/creating-a-jquery-plugin-using-jqboilerplate</id>
    <content type="html"><![CDATA[<h2>What is a jQuery Plugin?</h2>

<p>A typical jQuery plugin is a method that is added to the jQuery prototype object, <code>fn</code>, that interacts with one or more DOM elements wrapped in a jQuery object.  Something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Adding the tooltip method to the jQuery prototype</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tooltip</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">options</span> <span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Plugin logic</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then the jQuery plugin can be used like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Calls the jQuery tooltip plugin on a DOM element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input#firstName&quot;</span><span class="p">).</span><span class="nx">tooltip</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->


<h2>Creating Advanced jQuery Plugins</h2>

<p>Creating simple jQuery plugins like the above example is easy.  Creating more advanced/stateful jQuery plugins is not easy.  This is why projects such as the <strong>jQueryUI widget factory</strong> were created to provide structure for advanced/stateful jQuery plugins.</p>

<h2>jQueryUI Widget Factory</h2>

<p>Although the <strong>jQueryUI widget factory</strong> is a great project that helps maintain best practices, code organization, and consistency among jQuery plugins, not every developer wants to use it.  The most common reason for developers not using the widget factory, is that it places another level of abstraction on top of creating a jQuery plugin.  This means another dependency/project that you need to keep upgraded, and another API that you need to learn.</p>

<h2>jqBoilerplate</h2>

<p>Enter <a href="http://www.jqBoilerplate.com">jqBoilerplate</a>.  <strong>jqBoilerplate</strong> is a project I created that provides boilerplate jQuery/JavaScript code that will help you start writing stateful jQuery plugins/widgets more efficiently, without having to learn a new API.  All of the code provided is just vanilla jQuery, so if you know jQuery, you can start working right away.</p>

<p>The boilerplate code heavily uses the <strong>Revealing Module Pattern</strong>, which is a Classical JavaScript design pattern to allow private and public properties/methods.  This makes it trivial to provide your plugin users with a public API, while keeping the private parts of your plugin well... private.</p>

<h2>The Revealing Module Pattern Example</h2>

<p>Here is a plain JavaScript example of the Revealing Module Pattern:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Person Constructor</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">occupation</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//Instance variables stored in the self object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">firstName</span><span class="o">:</span> <span class="nx">firstName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastName</span><span class="o">:</span> <span class="nx">lastName</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">occupation</span><span class="o">:</span> <span class="nx">occupation</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Public method</span>
</span><span class='line'><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">self</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Private method</span>
</span><span class='line'><span class="nx">_getOccupation</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">occupation</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Public API</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">getFullName</span><span class="o">:</span> <span class="nx">getFullName</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above example allows you to view greg's first and last name (Click on the JavaScript tab to view the code).  If you wanted to view greg's occupation, you would not be able to, because greg's occupation is private (not returned by the function).</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/kSAZ5/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<h2>Other benefits of jqBoilerplate</h2>

<p>jqBoilerplate not only organizes your jQuery plugin code with the Revealing Module Pattern, but it provides other plugin goodies as well.  Other goodies include a free jQuery pseudo selector, methods to interact with getting and setting plugin options, prevention of multiple instances of your jQuery plugin being called on the same element, callback function and chaining support, and more.</p>

<h2>How to Use jqBoilerplate</h2>

<p>Although a lot of the plugin code has already been written for you, certain methods have been left mostly blank so that you can put your custom jQuery logic in them.  These methods include:</p>

<p><code>_events()</code> - This method will handle setting all of your plugin event handlers</p>

<p><code>disable()</code> - This method will disable the DOM element being called by your plugin</p>

<p><code>enable()</code> - This method will enable the DOM element being called by your plugin</p>

<p><code>destroy()</code> - This method will bring the page back to it's initial state (before the plugin was called)</p>

<p><code>create()</code> - This method will create your jQuery plugin.  This is where the magic happens.</p>

<p>Although all of these methods are provided, you are free to remove them if you feel they are not necessary for your plugin.</p>

<p>After you write your custom logic in the above methods, the only thing left to do is update the <code>pluginName</code> variable to match your specific jQuery plugin name, and also update the <code>pluginVersion</code> variable to the match the actual release version of your jQuery plugin.  And thats it!  Happy jQuery Plugin coding!</p>

<h2>Frequently Asked Questions</h2>

<p>Questions will be added here from the <a href="https://github.com/gfranko/jq-boilerplate/issues" target="_blank">Github Issues Page</a> and from the comments below.  Also, more demos/documentation will be provided on request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the jQuery Plugin SelectBoxIt]]></title>
    <link href="http://gfranko.github.com/blog/introducing-the-jquery-plugin-selectboxit/"/>
    <updated>2012-04-14T00:11:00-04:00</updated>
    <id>http://gfranko.github.com/blog/introducing-the-jquery-plugin-selectboxit</id>
    <content type="html"><![CDATA[<p><link href="/stylesheets/jQuery.selectBoxIt.css" rel="stylesheet" type="text/css"></p>

<script src="/javascripts/jQuery.selectBoxIt.min.js" type="text/javascript"></script>


<script src="http://jqueryui.com/themeroller/themeswitchertool/"></script>


<script src="/javascripts/jquery.tableofcontents.min.js"></script>




<script type="text/javascript">
    $(function() {
        $("#toc").tableOfContents(null, { startLevel: "2", depth: "2" }); 
        var selectBox = $("select#test, select#icons").selectBoxIt({ showEffect: "fadeIn", showEffectSpeed: 300, hideEffect: "fadeOut", hideEffectSpeed: 300 }).data("selectBoxIt");
        $("#switcher").themeswitcher();
        var effectsSelectBox = $("select#effectsDropDown").selectBoxIt().data("selectBoxIt");
        $("#effectsButton").click(function() {
            var effect = $("select#effectsDropDown").val();
            selectBox.setOptions({ showEffect: effect, hideEffect: effect });
            if(!selectBox.list.is(":visible")) {
                selectBox.open();
            }
            else {
                selectBox.close();   
            }
        });
        $(".ui-button").mouseenter(function() {
            $(this).addClass("ui-state-hover");
        });
        $(".ui-button").mouseleave(function() {
            $(this).removeClass("ui-state-hover");
        });
        var upArrowSelectBox = $("select#upArrow").selectBoxIt().data("selectBoxIt");

        $("select#upArrow").bind({
            "open": function() {
                upArrowSelectBox.setOption("downArrowIcon", "ui-icon ui-icon-triangle-1-n");
            },
            "close": function() {
                upArrowSelectBox.setOption("downArrowIcon", "ui-icon ui-icon-triangle-1-s");
            }
        });

        var optgroupsSelectBox = $("select#optgroups").selectBoxIt().data("selectBoxIt");
    });
</script>


<h2>What is SelectBoxIt?</h2>

<p><select id="test" name="test">
<option value="SelectBoxIt is:">SelectBoxIt is:</option>
<option value="a jQuery Plugin">a jQuery Plugin</option>
<option value="a Select Box Replacement">a Select Box Replacement</option>
<option value="a Stateful UI Dropdown Widget">a Stateful UI Dropdown Widget</option>
</select></p>

<br /><br />


<p>A jQuery plugin that progressively enhances an HTML Select Box into a <strong>single option</strong> dropdown list.  The dropdown list can be optionally styled with <strong>ThemeRoller</strong> (<em>Preview a Theme Below</em>) and <strong>jQueryUI/custom image icons</strong>, and optionally animated with <strong>jQueryUI show/hide effects</strong> (<em>Preview a jQueryUI Effect Below</em>).</p>

<div style="float:left;padding-right:100px;"><em>Preview a Theme</em>  <div id="switcher"></div></div>


<div style="float:left;"><em>Preview a jQueryUI Effect</em>
<br />
<select class="effects" name="effects" id="effectsDropDown">
<option value="blind">blind</option>
<option value="bounce">bounce</option>
<option value="clip">clip</option>
<option value="drop">drop</option>
<option value="explode">explode</option>
<option value="fold">fold</option>
<option value="highlight">highlight</option>
<option value="puff">puff</option>
<option value="scale">scale</option>  
<option value="shake">shake</option>
<option value="size">size</option>
<option value="slide">slide</option>
</select>

<button id="effectsButton" class="ui-button ui-state-default ui-corner-all ui-button-text-only" role="button" aria-disabled="false">
    <span class="ui-button-text">Run Effect</span>
</button>
</div>


<br /><br /><br /><br />


<p>The project is hosted on <a href="https://github.com/gfranko/jQuery.selectBoxIt.js" target="_blank" class="projectLinks">Github</a>, has a <a href="http://www.selectboxit.com" target="_blank">project page</a> the <a href="/docs/jQuery.selectBoxIt.html" target="_blank" class="projectLinks">annotated source code</a> is available, and an <a href="/test/SpecRunner.html" target="_blank" class="projectLinks">online test suite</a> is also available.  SelectBoxIt is available for use under the <a href="https://github.com/gfranko/jQuery.selectBoxIt.js/blob/master/MIT-LICENSE.txt" target="_blank" class="projectLinks">MIT software license</a>.  You can report bugs and discuss features on the <a href="https://github.com/gfranko/jQuery.selectBoxIt.js/issues?sort=created&direction=desc&state=open" target="_blank">GitHub issues page</a>, or send tweets to <a href="http://www.twitter.com/gregfranko" target="_blank">@gregfranko</a>.</p>

<br />


<!-- more -->


<h2>Table of Contents</h2>

<ul id="toc" style="list-style:none;background:#F0F0F0;"></ul>


<h2>Downloads and Dependencies</h2>

<p>SelectBoxIt depends on jQuery 1.6.1+ (It is always recommended to use the latest version of jQuery) and the latest version of the jQueryUI Widget Factory.  If you want to style your dropdown list with jQueryUI, download a default <a href="http://jqueryui.com/themeroller/" target="_blank">jQueryUI CSS Theme</a> or create your own theme.  If you want to use jQueryUI for advanced show/hide effects, download the latest version of the <a href="http://jqueryui.com/download" target="_blank">jQueryUI effects</a> (only the custom <strong>Effects</strong> you use are required).</p>

<p><a href="https://raw.github.com/gfranko/jQuery.selectBoxIt.js/master/src/javascripts/jQuery.selectBoxIt.js" target="_blank" style="display:inline-block;">
<button id="effectsButton" class="ui-button ui-state-default ui-corner-all ui-button-text-only" role="button" aria-disabled="false" style="margin:0;width:200px;font-size:16px;padding:0px;">
<span class="ui-button-text">Development Version</span>
</button>
</a>
<span class="ui-button-text">72kb, Full source, lots of comments</span></p>

<p><a href="https://raw.github.com/gfranko/jQuery.selectBoxIt.js/master/src/javascripts/jquery.selectBoxIt.min.js" target="_blank" style="display:inline-block;">
<button id="effectsButton" class="ui-button ui-state-default ui-corner-all ui-button-text-only" role="button" aria-disabled="false" style="margin:0;width:200px;font-size:16px;padding:0px;">
<span class="ui-button-text">Production Version</span>
</button>
</a>
<span class="ui-button-text">3.5kb, Packed and gzipped</span></p>

<br />


<h2>Why Use SelectBoxIt?</h2>

<p><a href="http://jqueryui.com/themeroller/" target="_blank"><img class="images" src="/images/themeroller.png" width="120" height="130" title="jQueryUI Themeroller" ></a> <a href="http://docs.jquery.com/UI/Effects/" target="_blank"><img class="images" src="/images/jqueryui.png" width="120" height="130" title="jQueryUI Effects" ></a>
<strong>SelectBoxIt</strong> gives you full control to style and customize your HTML Select Box to fit the look and feel of your site.  Integration with <strong>jQueryUI</strong> is built-in to provide advanced stying and custom effects.</p>

<p>SelectBoxIt was built to make a developers life easier, not harder.  All of your current JavaScript validation code will continue to work.  If you want to enhance your validation/UI logic, you can listen to the over <strong>20 events</strong> and call the <strong>14 methods</strong> provided by SelectBoxIt.</p>

<br />


<h2>Notable Features</h2>

<p>-Built-in <strong>ARIA support</strong> (Accessible Rich Internet Applications)<br /><br />
-Full <strong>keyboard search and navigation support</strong><br /><br />
-Handful of <strong>customizable options</strong><br /><br />
-An <strong>event API</strong> triggered on the original select box element that calls the plugin<br /><br />
-A <strong>method API</strong> providing developers with methods to interact with the dropdown list (i.e. Search, Open, Disable, Set Options).<br /><br />
-<strong>Selected</strong>, <strong>disabled</strong>, and <strong>optgroup</strong> support<br /><br />
-Easily <strong>extendable</strong> to allow developers to create new widgets</p>

<br />


<h2>Browser Support</h2>

<p>Tested in IE7+, Firefox 4+, Chrome, Safari 4+, and Opera 11+.</p>

<p>Accessibility Testing was done in IE7+ and Firefox 4+ using JAWS 12, a proprietary screen reader.</p>

<br />


<h2>Getting Started</h2>

<p><strong>1.</strong>  Download the latest <a href="https://github.com/gfranko/jQuery.selectBoxIt.js/zipball/master">SelectBoxIt Project Folder</a>.  All of the plugin files are in the <code>src</code> directory (this includes both the JavaScript and CSS files).  If you want to see an example page with all of the files included, look in the <code>demos</code> directory.</p>

<p><strong>2.</strong>  Go to the <a href="http://jqueryui.com/download" target="_blank">jQueryUI Custom Download Page</a>.  This is where we will be downloading the jQueryUI Widget Factory and potentially a jQueryUI CSS Theme and jQueryUI show/hide animations.</p>

<p>-Once you are at the jQueryUI custom download page, check the box to download the <a href="http://jqueryui.com/download" target="_blank">jQueryUI Widget Factory</a>.</p>

<p><a href="http://jqueryui.com/download" target="_blank">
<img src="/images/widgetFactory.PNG" width="800" height="530" title="jQueryUI Widget Factory" >
</a></p>

<p>-Next, If you are going to use jQueryUI to style your dropdown list (you should), then make sure to pick a jQueryUI CSS theme to download.  Alternatively, you can create your own theme or look at all of the jQueryUI default themes with <a href="http://jqueryui.com/themeroller/" target="_blank">jQueryUI ThemeRoller</a>.</p>

<p><a href="http://jqueryui.com/download" target="_blank">
<img src="/images/theme.PNG" width="250" height="230" title="jQueryUI Theme" >
</a></p>

<p>You may also use a Google or Microsoft CDN hosted version of a default jQueryUI CSS theme instead of downloading a copy locally to your computer.  Replace the <code>[UI.VERSION]</code> with the jQueryUI version you are using (i.e. <em>1.8.18</em>) and also replace the <code>[THEME-NAME]</code> with the default theme name you are using (i.e. <em>smoothness</em>).</p>

<p><strong>Google</strong>: <code>http://ajax.googleapis.com/ajax/libs/jqueryui/[UI.VERSION]/themes/[THEME-NAME]/jquery-ui.css</code></p>

<br />


<p><strong>Microsoft</strong>
<code>http://ajax.aspnetcdn.com/ajax/jquery.ui/[UI.VERSION]/themes/[THEME-NAME]/jquery-ui.css</code></p>

<p>Next, if you are using jQueryUI for custom show/hide effects, then make sure to check the <code>Effects Core</code> box, and any of the custom animations you would like to use.</p>

<p>Finally, click the <code>Download</code> button to download your custom jQueryUI files!</p>

<p><a href="http://jqueryui.com/download" target="_blank">
<img src="/images/jqueryUIEffects.png" width="800" height="530" title="jQueryUI Effects" >
</a></p>

<p><strong>3.</strong></p>

<h3>HTML</h3>

<p>Create an HTML select box with <code>id</code> and <code>name</code> attributes.  The <code>name</code> attribute from the HTML select box will be copied to the new dropdown list that the plugin creates (this allows you to easily interact with the new dropdown list without having to know a new <code>id</code> or <code>class</code> attribute).  Each select box option should have a <code>value</code> attribute.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;SelectBoxIt is:&quot;</span><span class="nt">&gt;</span>SelectBoxIt is:<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a jQuery Plugin&quot;</span><span class="nt">&gt;</span>a jQuery Plugin<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a Select Box Replacement&quot;</span><span class="nt">&gt;</span>a Select Box Replacement<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a Stateful UI Dropdown Widget&quot;</span><span class="nt">&gt;</span>a Stateful UI Dropdown Widget<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Your select box option <code>value</code> attributes and text also do not have to be the same.  This would also work:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;someValue&quot;</span><span class="nt">&gt;</span>SelectBoxIt is:<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;jQuery&quot;</span><span class="nt">&gt;</span>a jQuery Plugin<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;select box&quot;</span><span class="nt">&gt;</span>a Select Box Replacement<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;widget&quot;</span><span class="nt">&gt;</span>a Stateful UI Dropdown Widget<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>SelectBoxIt</strong> also supports the <code>selected</code> and <code>disabled</code> HTML properties.  Keep in mind that the last select box option to contain the <code>selected</code> property will be the select box option that the dropdown list uses as it's default option.  Also, the <code>disabled</code> property can be used to disable the entire dropdown or specific dropdown options.</p>

<p>Here is an example of setting a select box option as the <code>selected</code> option:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;someValue&quot;</span><span class="nt">&gt;</span>SelectBoxIt is:<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;jQuery&quot;</span><span class="nt">&gt;</span>a jQuery Plugin<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;select box&quot;</span><span class="nt">&gt;</span>a Select Box Replacement<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;widget&quot;</span> <span class="na">selected</span><span class="nt">&gt;</span>a Stateful UI Dropdown Widget<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example of setting the <code>disabled</code> property for multiple select box options:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;someValue&quot;</span><span class="nt">&gt;</span>SelectBoxIt is:<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;jQuery&quot;</span> <span class="na">disabled</span><span class="nt">&gt;</span>a jQuery Plugin<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;select box&quot;</span><span class="nt">&gt;</span>a Select Box Replacement<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;widget&quot;</span> <span class="na">disabled</span><span class="nt">&gt;</span>a Stateful UI Dropdown Widget<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>4.</strong></p>

<h3>CSS</h3>

<p>-Customize <strong>jquery.selectBoxIt.css</strong> (Downloaded in Step 1) and then add it to the <em>head</em> section of your HTML page.  The CSS file by default expects a select box element with an <code>id</code> attribute of <em>test</em>.  Replace the word <em>test</em> in all of the CSS selectors with the unique <code>id</code> attribute of your HTML select box (if you don't use <em>test</em> as your <code>id</code> attribute).</p>

<p>-If you are using jQueryUI to style your dropdown list, then add the latest <strong>jQueryUI CSS file</strong> (i.e. <em>jquery-ui-1.8.18.custom.css</em>) to the <em>head</em> section of your HTML page.  This is downloaded in Step 2.  If you are using a Google or Microsoft CDN hosted version of a default jQueryUI theme, then you do not need to download anything, just include the hosted css file in the <em>head</em> section of your HTML page.</p>

<p>-If you are using jQueryUI to style your dropdown list, then add all of the jQueryUI images to your images folder.  Keep in mind that depending on your folder structure, you may need to update the image paths inside of the jQueryUI CSS file.</p>

<p><strong>Note:</strong>  This assumes that you have downloaded both of the css files to the same folder as your HTML page.  Modify the <code>href</code> attribute if you do not store the CSS files in the same folder as your HTML page.  Also, if you are <strong>not</strong> using jQueryUI to style your dropdown list, then you will most likely want to add additional CSS attributes to <strong>jquery.selectBoxIt.css</strong> to compensate.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;jquery.selectBoxIt.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;jquery-ui-1.8.18.custom.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>6.</strong></p>

<h3>JavaScript</h3>

<p>-If you are not already including <strong>jQuery</strong> in your HTML page, download <a href="http://jquery.com/" target="_blank">jQuery</a>, and add it immediately before the closing <code>body</code> tag.</p>

<p>-Next, add your custom <strong>jQueryUI</strong> JavaScript file (i.e. <em>jquery-ui-1.8.19.custom.min.js</em>) after <strong>jQuery</strong>.  This was downloaded in Step 2.</p>

<p>-Add <strong>jquery.selectBoxIt.min.js</strong> (downloaded in Step 1) after your custom <strong>jQueryUI</strong> JavaScript file.</p>

<p><strong>Note:</strong>  Order Matters.  Include these files in the same order as shown.  The jQueryUI Widget Factory and jQueryUI show/hide effects were included in the same file (jquery-ui-1.8.19).  You can find this file in the <code>SelectBoxIt</code> Github Repository under the <code>libs/jqueryUI</code> directory.  Also, this assumes that you have downloaded all of the JavaScript files to the same folder as your HTML page.  Modify the <code>src</code> attribute if you do not store the JavaScript files in the same folder as your HTML page.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>//Your other markup...<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery-1.7.2.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery-ui-1.8.19.custom.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery.selectBoxIt.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Call the plugin</strong></p>

<p>In your JavaScript code, call the selectBoxIt method on your HTML select box.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Executes your code when the DOM is ready.  Acts the same as $(document).ready().</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//Calls the selectBoxIt method on your HTML select box.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Options API</h2>

<p>The Options API allows you to customize the dropdown list by setting custom options.  All options can be set when the plugin is called, or after the plugin is called, using the <code>setOption()</code> or <code>setOptions()</code> methods.</p>

<p>Here is an example of setting the options when the plugin is called:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">({</span> <span class="nx">showEffect</span><span class="o">:</span> <span class="s2">&quot;fadeIn&quot;</span><span class="p">,</span> <span class="nx">showEffectSpeed</span><span class="o">:</span> <span class="s2">&quot;medium&quot;</span><span class="p">,</span> <span class="nx">hideEffect</span><span class="o">:</span> <span class="s2">&quot;fadeOut&quot;</span><span class="p">,</span> <span class="nx">hideEffectSpeed</span><span class="o">:</span> <span class="s2">&quot;medium&quot;</span> <span class="p">}).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example of setting the options after the plugin is called using the <code>setOptions()</code> method:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selectBox</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">({</span> <span class="nx">showEffect</span><span class="o">:</span> <span class="s2">&quot;fadeIn&quot;</span><span class="p">,</span> <span class="nx">showEffectSpeed</span><span class="o">:</span> <span class="s2">&quot;medium&quot;</span><span class="p">,</span> <span class="nx">hideEffect</span><span class="o">:</span> <span class="s2">&quot;fadeOut&quot;</span><span class="p">,</span> <span class="nx">hideEffectSpeed</span><span class="o">:</span> <span class="s2">&quot;medium&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example of setting a single option after the plugin is called using the <code>setOption()</code> method:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selectBox</span><span class="p">.</span><span class="nx">setOption</span><span class="p">(</span><span class="s2">&quot;showEffect&quot;</span><span class="p">,</span> <span class="s2">&quot;fadeIn&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>All of the custom options are described below:</p>

<p><strong>showEffect</strong>: Accepts a String: <code>none</code>, <code>fadeIn</code>, <code>show</code>, <code>slideDown</code>, or any of the <a href="http://jqueryui.com/demos/show/" target="_blank"> jQueryUI show effects</a> (i.e. <code>bounce</code>).  Default is <code>none</code></p>

<p><strong>showEffectOptions</strong>: Accepts an object literal.  All of the available properties are based on the <a href="http://docs.jquery.com/UI/Effects/" target="_blank">jqueryUI effect options</a>(i.e. {direction: <code>down</code>}).  Default is <code>{}</code></p>

<p><strong>showEffectSpeed</strong>: Accepts a Number (milliseconds) or a String: <code>slow</code>, <code>medium</code>, or <code>fast</code>.  Default is <code>medium</code></p>

<p><strong>hideEffect</strong>: Accepts String: <code>none</code>, <code>fadeOut</code>, <code>hide</code>, <code>slideUp</code>, or any of the <a href="http://jqueryui.com/demos/hide/" target="_blank"> jQueryUI hide effects</a> (i.e. <code>bounce</code>). Default is <code>none</code></p>

<p><strong>hideEffectOptions</strong>: Accepts an object literal.  All of the available properties are based on the <a href="http://docs.jquery.com/UI/Effects/" target="_blank">jqueryUI effect options</a>(i.e. {direction: <code>up</code>}).  Default is <code>{}</code></p>

<p><strong>hideEffectSpeed</strong>: Accepts a Number (milliseconds) or a String: <code>slow</code>, <code>medium</code>, or <code>fast</code>.  Default is <code>medium</code></p>

<p><strong>keyboardSearch</strong>: Allows users to search for dropdown options.  Accepts a Boolean: true or false.  Default is <code>true</code></p>

<p><strong>keyboardNavigation</strong>: Allows keyboard navigation using the <code>up</code> and <code>down</code> keyboard arrow keys.  Accepts a Boolean: true or false.  Default is <code>true</code></p>

<p><strong>showFirstOption</strong>: Shows the first select box option within the dropdown options list. Accepts a Boolean: true or false.  Default is <code>true</code></p>

<p><strong>defaultText</strong>: Overrides the text, used by the dropdown list, to allow a user to specify custom text.  Accepts a String.  Default is <code>""</code>.</p>

<p><strong>defaultIcon</strong>: Overrides the icon, used by the dropdown list selected option, to allow a user to specify a custom icon.
Accepts a String.  Default is <code>""</code>.</p>

<p><strong>downArrowIcon</strong>: Overrides the default down arrow, used by the dropdown list, to allow a user to specify a custom image.
Accepts a String.  Default is <code>"ui-icon ui-icon-triangle-1-s"</code>, which are the jQueryUI class names for the down arrow icon.</p>

<h2>Events API</h2>

<p>All custom/default events are <strong>triggered on the original select box element</strong> (not the new dropdown list).  The original select box <code>value</code> attribute is also synced with the new dropdown list, so if a user selects a new value from the dropdown list, the original select box value will also be updated.  This allows your existing code to continue working inside of forms.</p>

<p>You can catch <strong>Default Events</strong> by using the jQuery <code>bind()</code> or <code>on()</code> methods, or by using jQuery convenience methods such as <code>click</code>, <code>change</code>, etc.  You <strong>must</strong> use the jQuery <code>bind()</code> or <code>on()</code> methods to catch <strong>Custom Events</strong>.</p>

<p>Here is an example of catching a <strong>Default Event</strong> by using the jQuery <code>bind()</code> method:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;focus&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Do something here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example of catching a <strong>Default Event</strong> by using a jQuery convenience method:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">focus</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//Do something here</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example of catching a <strong>Custom Event</strong> by using the jQuery <code>bind()</code> method:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;open&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Do something here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note:</strong>  <em>SelectBoxIt</em> also provides <code>$(":selectBox-selectBoxIt")</code>, a custom jQuery pseudo selector, that returns all select box elements that use the SelectBoxIt plugin (useful if you are using the plugin to enhance multiple select box elements and want to catch events on all select box elements).</p>

<h3>Default Events</h3>

<p><code>focus</code> - A focus event will be triggered when a user either clicks or tabs to the dropdown list.</p>

<p><code>focusin</code> - A focusin event will be triggered when a user either clicks or tabs to the dropdown list.  Focus and focusin events are closely related, but the focusin event bubbles up the DOM tree and the focus event does not bubble.  If you are using a library such as <strong>Backbone.js</strong>, which uses event delegation, use the focusin event to determine when the select box element gains focus.</p>

<p><code>click</code> - A click event will be triggered when a user clicks on the dropdown list.</p>

<p><code>blur</code> - A blur event will be triggered when the dropdown list loses focus.</p>

<p><code>focusout</code> - A focusout event will be triggered when the dropdown list loses focus.  Blur and focusout events are closely related, but the focusout event bubbles up the DOM tree and the blur event does not bubble.  If you are using a library such as <strong>Backbone.js</strong>, which uses event delegation, use the focusout event to determine when the select box element loses focus.</p>

<p><code>change</code> - A change event will be triggered when a user selects a new dropdown list option.</p>

<p><code>mouseenter</code> - A mouseenter event will be triggered when a user's mouse enters an element.  jQuery uses both mouseenter and mouseleave to simulate a hover event.</p>

<p><code>mouseleave</code> - A mouseleave event will be triggered when a user's mouse leaves an element.  jQuery uses both mouseenter and mouseleave to simulate a hover event.</p>

<h3>Custom Events</h3>

<p><code>open</code> - An open event will be triggered when a user opens the dropdown list.</p>

<p><code>close</code> - A close event will be triggered when a user closes the dropdown list.</p>

<p><code>moveDown</code> - A moveDown event will be triggered when a user presses the down arrow key to select a dropdown list option directly beneath the currently selected option.</p>

<p><code>moveUp</code> - A moveUp event will be triggered when a user presses the up arrow key to select a dropdown list option directly above the currently selected option.</p>

<p><code>search</code> - A search event will be triggered when a user does a text search that matches a dropdown list option.  Keep in mind that this event will be fired only when a search match is found.</p>

<p><code>enter</code> - An enter event will be triggered when a user presses the enter key while the dropdown list is focused.</p>

<p><code>tabFocus</code> - A tabFocus event will be triggered when a user presses the tab key to focus the dropdown list.</p>

<p><code>tabBlur</code> - A tabBlur event will be triggered when a user presses the tab key to blur the dropdown list.</p>

<p><code>backspace</code> - A backspace event will be triggered when a user presses the backspace key while the dropdown list is focused.</p>

<p><code>disable</code> - A disable event will be triggered if a dropdown list becomes disabled.</p>

<p><code>enable</code> - An enable event will be triggered if a dropdown list becomes enabled, or in other words, no longer disabled.</p>

<p><code>destroy</code> - A destroy event will be triggered if a dropdown list is destroyed.</p>

<p><code>create</code> - A create event will be triggered if a dropdown list is created.</p>

<h2>Method API</h2>

<p>The Method API allows you to programmatically interact with the dropdown list after it is created.  All methods can be called individually or chained.  Here is an example of chaining:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selectBox</span><span class="p">.</span><span class="nx">open</span><span class="p">().</span><span class="nx">close</span><span class="p">().</span><span class="nx">moveDown</span><span class="p">().</span><span class="nx">disable</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you want to provide a delay (in milleseconds) before your methods are called, use the <strong>wait()</strong> method.  Here is an example of the <strong>wait()</strong> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Opens the dropdown list for two seconds before closing the dropdown list</span>
</span><span class='line'><span class="nx">selectBox</span><span class="p">.</span><span class="nx">open</span><span class="p">().</span><span class="nx">wait</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note:</strong> You can pass a callback function to all of the methods.  Inside of the callback function, the <code>this</code> keyword refers to the plugin object, which allows you to call another plugin method like so:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">selectBox</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveDown</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>open()</strong>: Opens the dropdown options list.</p>

<p><strong>close()</strong>: Closes the dropdown options list.</p>

<p><strong>moveDown()</strong>: Selects the dropdown option directly beneath the currently selected option.</p>

<p><strong>moveUp()</strong>: Selects the dropdown option directly above the currently selected option.</p>

<p><strong>search(String searchTerm)</strong>: Selects the dropdown option that most closely matches the text passed into the method.  If a pattern match is found, the dropdown text value changes.  If a pattern match is not found, then the dropdown text value does not change.</p>

<p><strong>setOption(String key, String value)</strong>: Sets a single plugin option.</p>

<p><strong>setOptions(Object newOptions)</strong>: Sets or adds new plugin option settings.</p>

<p><strong>disable()</strong>: Disables the dropdown/select box.</p>

<p><strong>enable()</strong>: Enables the dropdown/select box.</p>

<p><strong>destroy()</strong>: Removes the dropdown from the DOM and makes the original select box element visible.</p>

<p><strong>wait(Number time, Function callback)</strong>: Delays execution of the callback function by the amount of time (milleseconds) specified by the <code>time</code> parameter.</p>

<h2>Getting Options</h2>

<p>You can get the current options used by <code>SelectBoxIt</code> two different ways:</p>

<p><strong>Example 1:</strong> Retrieving a single plugin option</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBoxIt</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">selectBoxIt</span><span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s2">&quot;showFirstOption&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Example 2:</strong> Retrieving all of the plugin options
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">selectBoxIt</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">selectBoxIt</span><span class="p">.</span><span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Optgroup Support</h2>

<p><strong>SelectBoxIt</strong> supports optgroups.  You have full control to style the optgroups by using the <code>optgroupHeader</code> and <code>optgroupOption</code> CSS classes.</p>

<p>Here is an example of a dropdown list that uses optgroups:</p>

<p><select id="optgroups" name="optgroups">
<option value="SelectBoxIt is:">SelectBoxIt is:</option>
<optgroup label="Optgroup 1">
  <option value="a jQuery Plugin">a jQuery Plugin</option>
</optgroup>
<optgroup label="Optgroup 2">
  <option value="a Select Box Replacement">a Select Box Replacement</option>
</optgroup>
<optgroup label="Optgroup 3">
  <option value="a Stateful UI Dropdown Widget">a Stateful UI Dropdown Widget
  </option>
</optgroup>
</select></p>

<br /><br />


<p>The HTML code from the above example looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;optgroups&quot;</span> <span class="na">name=</span><span class="s">&quot;optgroups&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;SelectBoxIt is:&quot;</span><span class="nt">&gt;</span>SelectBoxIt is:<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;optgroup</span> <span class="na">label=</span><span class="s">&quot;Optgroup 1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a jQuery Plugin&quot;</span><span class="nt">&gt;</span>a jQuery Plugin<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/optgroup&gt;</span>
</span><span class='line'><span class="nt">&lt;optgroup</span> <span class="na">label=</span><span class="s">&quot;Optgroup 2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a Select Box Replacement&quot;</span><span class="nt">&gt;</span>a Select Box Replacement<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/optgroup&gt;</span>
</span><span class='line'><span class="nt">&lt;optgroup</span> <span class="na">label=</span><span class="s">&quot;Optgroup 3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a Stateful UI Dropdown Widget&quot;</span><span class="nt">&gt;</span>a Stateful UI Dropdown Widget
</span><span class='line'>  <span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/optgroup&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Using Icons</h2>

<p><strong>SelectBoxIt</strong> supports jQueryUI/custom image icons.  You can specify the class names that you want to use to show the appropriate icon(s) (set the <code>background</code> property inside of your CSS).  There are two ways to specify CSS class names (adding HTML5 data attributes or SelectBoxIt options).  View the <strong>Options API</strong> and <strong>HTML5 Data Attributes</strong> Sections for more documentation.</p>

<p>Here is an example of a dropdown list that uses jQueryUI icons:</p>

<br />


<p><select id="icons" name="test">
<option value="SelectBoxIt is:" data-icon="ui-icon ui-icon-search">SelectBoxIt is:</option>
<option value="a jQuery Plugin" data-icon="ui-icon ui-icon-check">a jQuery Plugin</option>
<option value="a Select Box Replacement" data-icon="ui-icon ui-icon-check">a Select Box Replacement</option>
<option value="a Stateful UI Dropdown Widget" data-icon="ui-icon ui-icon-check">a Stateful UI Dropdown Widget</option>
</select></p>

<br />


<p>The HTML code from the above example looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;icons&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;SelectBoxIt is:&quot;</span> <span class="na">data-icon=</span><span class="s">&quot;ui-icon ui-icon-search&quot;</span><span class="nt">&gt;</span>SelectBoxIt is:<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a jQuery Plugin&quot;</span> <span class="na">data-icon=</span><span class="s">&quot;ui-icon ui-icon-check&quot;</span><span class="nt">&gt;</span>a jQuery Plugin<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a Select Box Replacement&quot;</span> <span class="na">data-icon=</span><span class="s">&quot;ui-icon ui-icon-check&quot;</span><span class="nt">&gt;</span>a Select Box Replacement<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a Stateful UI Dropdown Widget&quot;</span> <span class="na">data-icon=</span><span class="s">&quot;ui-icon ui-icon-check&quot;</span><span class="nt">&gt;</span>a Stateful UI Dropdown Widget<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By specifying a <code>data-icon</code> HTML5 data attribute for each select box option, I am able to tell SelectBoxIt which CSS classes to use to show a custom image for each of my individual options.  The <code>ui-icon</code> and <code>ui-icon-search</code> CSS classes are both given by the jQueryUI CSS framework (these image icons are included in the <strong>ThemeRoller</strong> download folder).</p>

<p><strong>Note:</strong> If you had just specified a <code>data-icon</code> attribute on the select box, and not on any of the individual options, the dropdown list will use the <code>data-icon</code> attribute as a default icon image, and will not change it's icon when options are selected.</p>

<p>If you want to use custom icons, then you need to create custom CSS properties in <strong>jquery.selectBoxIt.css</strong> similar to this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.someImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Width</span> <span class="n">and</span> <span class="k">height</span> <span class="n">of</span> <span class="n">your</span> <span class="k">icon</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">File</span> <span class="n">path</span> <span class="n">to</span> <span class="n">your</span> <span class="k">icon</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(../someimage.png)</span> <span class="k">no-repeat</span> <span class="k">top</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are a few other goodies provided, including a way for you to change the default icon image using the <code>defaultIcon</code> option, and also a way for you to customize the dropdown down arrow to be a different icon.</p>

<p>Here is an example of a dropdown list that uses jQueryUI icons like the above example, but also updates the dropdown down arrow to be an up arrow when the dropdown list is opened.</p>

<p><select id="upArrow" name="test">
<option value="SelectBoxIt is:" data-icon="ui-icon ui-icon-search">SelectBoxIt is:</option>
<option value="a jQuery Plugin" data-icon="ui-icon ui-icon-check">a jQuery Plugin</option>
<option value="a Select Box Replacement" data-icon="ui-icon ui-icon-check">a Select Box Replacement</option>
<option value="a Stateful UI Dropdown Widget" data-icon="ui-icon ui-icon-check">a Stateful UI Dropdown Widget</option>
</select></p>

<br /><br />


<p>Here is the jQuery snippet from the above example:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">upArrowSelectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#upArrow&quot;</span><span class="p">).</span><span class="nx">selectBoxIt</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;selectBoxIt&quot;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#upArrow&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;open&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">upArrowSelectBox</span><span class="p">.</span><span class="nx">setOption</span><span class="p">(</span><span class="s2">&quot;downArrowIcon&quot;</span><span class="p">,</span> <span class="s2">&quot;ui-icon ui-icon-triangle-1-n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s2">&quot;close&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">upArrowSelectBox</span><span class="p">.</span><span class="nx">setOption</span><span class="p">(</span><span class="s2">&quot;downArrowIcon&quot;</span><span class="p">,</span> <span class="s2">&quot;ui-icon ui-icon-triangle-1-s&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you are interested in other jQueryUI icon images, check out the <a href="http://jquery-ui.googlecode.com/svn/tags/1.6rc5/tests/static/icons.html" target="_blank">jQueryUI Icons Test Page</a></p>

<h2>HTML5 Data Attributes</h2>

<p><strong>data-icon</strong> - Specifies the custom or jQueryUI CSS classes you want to use to show icon images for the dropdown list and/or dropdown list individual options</p>

<p><strong>data-downarrow</strong> - Specifies the custom or jQueryUI CSS classes you want to use to replace the default down arrow icon image</p>

<p><strong>data-text</strong> - Specifies the custom text that you want to use for the dropdown list</p>

<h2>CSS Guide</h2>

<p><strong>SelectBoxIt</strong> dynamically creates new HTML elements to replace your original select box.  Each new HTML element has a dynamic <code>id</code> attribute generated for it.  Each CSS selector in the default CSS file expects a select box with an <code>id</code> of <strong>test</strong>, but if you are using a different <code>id</code> attribute for your select box (which you probably are), just replace the word <strong>test</strong> with the <code>id</code> attribute of your select box.</p>

<p><strong>Note:</strong> It is highly recommended to use a jQueryUI theme to help style your <strong>SelectBoxIt</strong> dropdown list, but it is not required.  Also, keep in mind that the CSS file is heavily commented to help you easily understand where to place your custom CSS attributes.</p>

<p><strong>Element Overview</strong></p>

<p><code>#testSelectBoxItContainer</code> - This selector is a <code>div</code> element that holds all of the HTML elements generated by <strong>SelectBoxIt</strong>.  If you want to horizontally or vertically position your dropdown list on the page (i.e. float: left;), do that using this element.</p>

<p><code>#testSelectBoxIt</code> - This selector is a <code>div</code> element that acts as the new dropdown list.  It contains the dropdown list selected text, and also the down arrow image (provided by jQueryUI).  If you want to increase the height of the dropdown list, use this element.</p>

<p><code>#testSelectBoxItDefaultIcon</code> - If you are using an image with your dropdown list, this selector allows you to adjust the positioning of the image.</p>

<p><code>#testSelectBoxItText</code> - This selector is a <code>span</code> element that holds the dropdown list selected text.  If you want to change the font or text positioning of the dropdown list selected text, use this element.</p>

<p><code>#testSelectBoxItArrowContainer</code> - This selector is a <code>span</code> element that holds the dropdown list down arrow image.  If you want to alter the positioning of the down arrow or enclose the down arrow inside of a box (by adding a <code>border-left</code> CSS attribute), use this element.</p>

<p><code>#testSelectBoxItOptions .optgroupHeader</code> - This selector is an <code>li</code> element that styles all of the dropdown lists optgroup header text (if you are using optgroups).</p>

<p><code>#testSelectBoxItOptions .optgroupOption</code> - This selector is an <code>li</code> element that styles all of the dropdown lists optgroup options text (if you are using optgroups).</p>

<p><code>#testSelectBoxItOptions</code> - This selector is a <code>ul</code> element that holds all of the dropdown list options.  If you want to limit how many dropdown list options are visible when the dropdown list is opened, change the <code>max-height</code> attribute of this element.</p>

<p><code>#testSelectBoxItOptions li</code> - This selector is all of the <code>li</code> elements that each hold one of the dropdown list options.  If you want to change anything (i.e. background-color, font) about the dropdown list options, use this element.</p>

<p><code>#testSelectBoxItOptions li span</code> - If you are using image icons with your individual dropdown list options, this selector allows you to adjust the positioning of each icon.</p>

<h2>Demos</h2>

<p><strong>Note:</strong> Edit any of these demos by clicking the <span style="display:inline-block;*display:inline;zoom:1;" class="ui-icon ui-icon-plusthick"></span> button.  Re-run each demo by clicking the <span style="display:inline-block;*display:inline;zoom:1;" class="ui-icon ui-icon-play"></span>  button.</p>

<p><strong>Basic</strong>- Uses the default options</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/mxvgx/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>Basic with Disabled Options</strong> - Uses the default options with multiple disabled dropdown options</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/qPfz3/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>jQuery Show/Hide Effects</strong>- Uses the jQuery <code>slide</code> effect.  All jQuery effects can be used (i.e. fade, show, etc)</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/w4kph/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>jQueryUI Show/Hide Effects with Special Show Effect Option</strong>- Pick a jQueryUI effect from the select box and then click on the <strong>Run Effect</strong> button to view the effect.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/rXuRR/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>Using the Method API to open, close, move up, move down, and search</strong>- Click each button to see what happens</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/ghHEq/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>Using the Method API to disable, enable, and destroy the dropdown list</strong>- Click each button to see what happens</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/AqGJJ/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>Using the Events and Options API's</strong>- Hides the first dropdown list option (by changing the <code>showFirstOption</code> option to <code>false</code>) when a change event is triggered on the original select box.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/c3rFP/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<p><strong>Using the Events API with custom events</strong>- Tracks a user's interaction with the dropdown list by printing out some of the custom events that are triggered by the plugin</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/gSt2G/embedded/result,js,html,css/light/"></iframe></p>

<br /><br />


<h2>Contributing to SelectBoxIt</h2>

<p>Take care to maintain the existing coding style. Add Jasmine unit tests for any new or changed functionality. Lint and test your code using <a href="https://github.com/cowboy/grunt">grunt</a>.</p>

<p>If you plan to contribute to <code>SelectBoxIt</code> in the future, keep in mind that you should make sure your code passes the Grunt checks.  If you are on Windows (like me) remember you need to run the grunt command using <code>grunt.cmd</code>.  Also, if you have trouble getting the Jasmine Unit Tests to work with PhantomJS 1.5 (the current release), install PhantomJS 1.3.</p>

<p>After you have verified your code, send a pull request to the <code>SelectBoxIt</code> dev branch.  After you send a pull request, you will hear back from me shortly after I review your code.</p>

<p>You'll find source code in the "src" subdirectory!</p>

<h2>Extending SelectBoxIt</h2>

<p>If you find that you need a feature that SelectBoxIt does not currently support, either let me know via the <a href="https://github.com/gfranko/jQuery.selectBoxIt.js/issues" target="_blank">Github issue tracker</a>, or <a href="https://github.com/gfranko/jQuery.selectBoxIt.js" target="_blank">fork</a> the project and and easily extend SelectBoxIt to create your own widget!</p>

<p><strong>Note:</strong> Remember that you need to include <strong>jQuery</strong>, the <strong>jQueryUI Widget Factory</strong>, and <strong>jquery.selectBoxIt.min.js</strong> before you include your new plugin file, since your plugin will depend on SelectBoxIt and all of its dependencies.</p>

<p><strong>Example: Extending SelectBoxIt</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Plugin setup</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">.</span><span class="nx">widget</span><span class="p">(</span><span class="s1">&#39;a.newPlugin&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">.</span><span class="nx">selectBox</span><span class="p">.</span><span class="nx">selectBoxIt</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Changing SelectBoxIt&#39;s default showEffect from &#39;none&#39; to &#39;slide&#39;</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">showEffect</span><span class="o">:</span> <span class="s2">&quot;slide&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Overwriting the SelectBoxIt open method</span>
</span><span class='line'>    <span class="nx">open</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Calling the default SelectBoxIt open method</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">selectBox</span><span class="p">.</span><span class="nx">selectBoxIt</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">open</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Adding new logic</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Just opened my new plugin!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Then call your new plugin like this</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selectBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;select#test&quot;</span><span class="p">).</span><span class="nx">newPlugin</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;newPlugin&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}(</span><span class="nx">jQuery</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Change Log</h2>

<p><code>0.9.0</code> - May 21, 2012 <em>Approaching a stable 1.0 release</em></p>

<pre><code>- IE7 and IE8 bug fix: A special thanks to lhwparis
</code></pre>

<p><code>0.8.0</code> - May 15, 2012 <em>Approaching a stable 1.0 release</em></p>

<pre><code>- Bug fixes for the `disabled` use cases
</code></pre>

<p><code>0.7.0</code> - May 10, 2012</p>

<pre><code>- Added optgroup support to allow dropdown list options to be put in subgroups.

- Bug fixes to the `change` and `focus` Event API handlers
</code></pre>

<p><code>0.6.0</code> - May 3, 2012</p>

<pre><code>- Added jQueryUI and custom icon support to allow icons to be used for the dropdown list and also alongside individual dropdown options.  You can specify the class names that you want to use to show the appropriate icon (set the background-image property inside of your CSS).  There are two new ways to do this (HTML5 data attributes or plugin options)

    * Added support for three new HTML5 data attributes to be used with the original select box element.  Use cases for each are described below.
        * data-icon - Specifies the custom or jQueryUI CSS classes you want to use to show icon images for the dropdown list and/or dropdown list individual options
        * data-downarrow - Specifies the custom or jQueryUI CSS classes you want to use to replace the default down arrow icon image
        * data-text - Specifies the custom text that you want to use for the dropdown list

    * Added support for two new options.  Use cases for each are described below.
        * defaultIcon - An alternative to the `data-icon` HTML5 data attribute
        * downArrowIcon - An alternative to the `data-downarrow` HTML5 data attribute
</code></pre>

<p><code>0.5.0</code> - April 29, 2012 <strong>MAJOR REWRITE</strong></p>

<pre><code>- SelectBoxIt has been rewritten using the jQueryUI Widget Factory!  This means that SelectBoxIt now depends on both jQuery and the jQueryUI Widget Factory.  This also means that there are a few API changes that are not backwards compatible...
    * getOption(), getOptions(), and create() were all removed from the Method API
    * To use the custom pseudo selector, you must now use $(":selectBox-selectBoxIt")

- SelectBoxIt now uses [grunt](https://github.com/cowboy/grunt) to run jsHint for code quality checking, Jasmine for unit testing, and UglifyJS for minification.

- Removed AMD Support
</code></pre>

<p><code>0.4.0</code> - April 28, 2012</p>

<pre><code>- `AMD Support`.  If `AMD` support is found, SelectBoxIt is wrapped in a define `module`.

  [UMD Patterns](https://github.com/umdjs/umd/blob/master/jqueryPlugin.js)

- `Bug fixes for supporting the `disabled` HTML property for individual select box options
</code></pre>

<p><code>0.3.0</code> - April 25, 2012</p>

<pre><code>- A new option, defaultText, was added to allow users to specify the default text of the dropdown list that is not linked to a specific select box option

- The disabled HTML property is now supported for individual select box options

- When a user presses the esc keyboard key, the dropdown options list will now close (become hidden)
</code></pre>

<p><code>0.2.0</code> - April 24, 2012</p>

<pre><code>- This release requires you to use jQuery 1.6.1+.

- You are no longer required to have select box option values be the same as the select box option text.

- IE bug fix to prevent default dropdown text from being selectable
</code></pre>

<p><code>0.1.0</code> - April 14, 2012</p>

<pre><code>- Initial SelectBoxIt release.  Added annotated source code, unit tests, and documentation
</code></pre>

<h2>Frequently Asked Questions</h2>

<p>Questions will be added here from the <a href="https://github.com/gfranko/jQuery.selectBoxIt.js/issues" target="_blank">Github Issues Page</a> and from the comments below.  Also, more demos/documentation will be provided on request.</p>
]]></content>
  </entry>
  
</feed>
